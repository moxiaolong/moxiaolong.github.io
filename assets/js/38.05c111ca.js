(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{352:function(s,t,a){"use strict";a.r(t);var n=a(8),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("在我们的日常开发中，总会有时候需要对一些变量做并发读写，比如 web 应用在同时接到多个请求之后， 需要对一些资源做初始化，而这些资源可能是只需要初始化一次的，而不是每一个 http 请求都初始化， 在这种情况下，我们需要限制只能一个协程来做初始化的操作，比如初始化数据库连接等， 这个时候，我们就需要有一种机制，可以限制只有一个协程来执行这些初始化的代码。 在 go 语言中，我们可以使用互斥锁（"),t("code",[s._v("Mutex")]),s._v("）来实现这种功能。\n")]),s._v(" "),t("h2",{attrs:{id:"互斥锁的定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#互斥锁的定义"}},[s._v("#")]),s._v(" 互斥锁的定义")]),s._v(" "),t("p",[s._v("这里引用一下维基百科的定义：")]),s._v(" "),t("p",[s._v("互斥锁（"),t("em",[s._v("Mutual exclusion")]),s._v("，缩写 "),t("code",[s._v("Mutex")]),s._v("）是一种用于多线程编程中，防止两个线程同时对同一公共资源 （比如全局变量）进行读写的机制。该目的通过将代码切片成一个一个的临界区域（"),t("em",[s._v("critical section")]),s._v("）达成。 临界区域指的是一块对公共资源进行访问的代码，并非一种机制或是算法。")]),s._v(" "),t("blockquote",[t("p",[s._v("互斥，顾名思义，也就是只有一个线程能持有锁。当然，在 go 中，是只有一个协程能持有锁。")])]),s._v(" "),t("p",[s._v("下面是一个简单的例子：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" sum "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 和")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" mu sync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Mutex "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 互斥锁")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// add 将 sum 加 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取锁，只能有一个协程获取到锁，")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 其他协程需要阻塞等待锁释放才能获取到锁。")]),s._v("\n   mu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 临界区域")]),s._v("\n   sum"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\n   mu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("TestMutex")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("testing"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 启动 1000 个协程")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" wg sync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("WaitGroup\n   wg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("go")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每个协程里面调用 add()")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         wg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Done")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等待所有协程执行完毕")]),s._v("\n   wg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Wait")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 最终 sum 的值应该是 1000")]),s._v("\n   assert"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Equal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sum"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br")])]),t("p",[s._v("上面的例子中，我们定义了一个全局变量 "),t("code",[s._v("sum")]),s._v("，用于存储和，然后定义了一个互斥锁 "),t("code",[s._v("mu")]),s._v("， 在 "),t("code",[s._v("add()")]),s._v(" 函数中，我们使用 "),t("code",[s._v("mu.Lock()")]),s._v(" 来加锁，然后对 "),t("code",[s._v("sum")]),s._v(" 进行加 1 操作， 最后使用 "),t("code",[s._v("mu.Unlock()")]),s._v(" 来解锁，这样就保证了在任意时刻，只有一个协程能够对 "),t("code",[s._v("sum")]),s._v(" 进行加 1 操作， 从而保证了在并发执行 "),t("code",[s._v("add()")]),s._v(" 操作的时候 "),t("code",[s._v("sum")]),s._v(" 的值是正确的。")]),s._v(" "),t("blockquote",[t("p",[s._v("上面这个例子，在我之前的文章中已经作为例子出现过很多次了，这里不再赘述了。")])]),s._v(" "),t("h2",{attrs:{id:"go-mutex-的基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go-mutex-的基本用法"}},[s._v("#")]),s._v(" go Mutex 的基本用法")]),s._v(" "),t("p",[t("code",[s._v("Mutex")]),s._v(" 我们一般只会用到它的两个方法：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Lock")]),s._v("：获取互斥锁。(只会有一个协程可以获取到锁，通常用在临界区开始的地方。)")]),s._v(" "),t("li",[t("code",[s._v("Unlock")]),s._v(": 释放互斥锁。(释放获取到的锁，通常用在临界区结束的地方。)")])]),s._v(" "),t("p",[t("code",[s._v("Mutex")]),s._v(" 的模型可以用下图表示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/go/mutex/1.webp",alt:"mutex_1.png"}})]),s._v(" "),t("p",[s._v("说明：")]),s._v(" "),t("ul",[t("li",[s._v("同一时刻只能有一个协程获取到 "),t("code",[s._v("Mutex")]),s._v(" 的使用权，其他协程需要排队等待（也就是上图的 "),t("code",[s._v("G1->G2->Gn")]),s._v("）。")]),s._v(" "),t("li",[s._v("拥有锁的协程从临界区退出的时候需要使用 "),t("code",[s._v("Unlock")]),s._v(" 来释放锁，这个时候等待队列的下一个协程可以获取到锁（实际实现比这里说的复杂很多，后面会细说），从而进入临界区。")]),s._v(" "),t("li",[s._v("等待的协程会在 "),t("code",[s._v("Lock")]),s._v(" 调用处阻塞，"),t("code",[s._v("Unlock")]),s._v(" 的时候会使得一个等待的协程解除阻塞的状态，得以继续执行。")])]),s._v(" "),t("blockquote",[t("p",[s._v("上面提到的这几点也是 "),t("code",[s._v("Mutex")]),s._v(" 的基本原理。")])]),s._v(" "),t("h2",{attrs:{id:"互斥锁使用的两个例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#互斥锁使用的两个例子"}},[s._v("#")]),s._v(" 互斥锁使用的两个例子")]),s._v(" "),t("p",[s._v("了解了 go "),t("code",[s._v("Mutex")]),s._v(" 基本原理之后，让我们再来看看 "),t("code",[s._v("Mutex")]),s._v(" 的一些使用的例子。")]),s._v(" "),t("h3",{attrs:{id:"gin-context-中的-set-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gin-context-中的-set-方法"}},[s._v("#")]),s._v(" gin Context 中的 Set 方法")]),s._v(" "),t("p",[s._v("一个很常见的场景就是，并发对 "),t("code",[s._v("map")]),s._v(" 进行读写，熟悉 go 的朋友应该知道，go 中的 "),t("code",[s._v("map")]),s._v(" 是不支持并发读写的， 如果我们对 "),t("code",[s._v("map")]),s._v(" 进行并发读写会导致 "),t("code",[s._v("panic")]),s._v("。")]),s._v(" "),t("p",[s._v("而在 "),t("code",[s._v("gin")]),s._v(" 的 "),t("code",[s._v("Context")]),s._v(" 结构体中，也有一个 "),t("code",[s._v("map")]),s._v(" 类型的字段 "),t("code",[s._v("Keys")]),s._v("，用来在上下文间传递键值对数据， 所以在通过 "),t("code",[s._v("Set")]),s._v(" 来设置键值对的时候需要使用 "),t("code",[s._v("c.mu.Lock()")]),s._v(" 来先获取互斥锁，然后再对 "),t("code",[s._v("Keys")]),s._v(" 做设置。")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Set is used to store a new key/value pair exclusively for this context.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// It also lazy initializes  c.Keys if it was not used previously.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value any"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取锁")]),s._v("\n   c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果 Keys 还没初始化，则进行初始化")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Keys "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Keys "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("any"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置键值对")]),s._v("\n   c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Keys"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放锁")]),s._v("\n   c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("同样的，对 "),t("code",[s._v("Keys")]),s._v(" 做读操作的时候也需要使用互斥锁：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Get returns the value for the given key, ie: (value, true).")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If the value does not exist it returns (nil, false)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value any"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" exists "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取锁")]),s._v("\n   c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("RLock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 读取 key")]),s._v("\n   value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" exists "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Keys"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放锁")]),s._v("\n   c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("RUnlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("blockquote",[t("p",[s._v("可能会有人觉得奇怪，为什么从 "),t("code",[s._v("map")]),s._v(" 中读也还需要锁。这是因为，如果读的时候没有锁保护， 那么就有可能在 "),t("code",[s._v("Set")]),s._v(" 设置的过程中，同时也在进行读操作，这样就会 "),t("code",[s._v("panic")]),s._v(" 了。")])]),s._v(" "),t("p",[s._v("这个例子想要说明的是，像 "),t("code",[s._v("map")]),s._v(" 这种数据结构本身就不支持并发读写，我们这种情况下只有使用 "),t("code",[s._v("Mutex")]),s._v(" 了。")]),s._v(" "),t("h3",{attrs:{id:"sync-pool-中的-pinslow-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sync-pool-中的-pinslow-方法"}},[s._v("#")]),s._v(" sync.Pool 中的 pinSlow 方法")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("sync.Pool")]),s._v(" 的实现中，有一个全局变量记录了进程内所有的 "),t("code",[s._v("sync.Pool")]),s._v(" 对象，那就是 "),t("code",[s._v("allPools")]),s._v(" 变量， 另外有一个锁 "),t("code",[s._v("allPoolsMu")]),s._v(" 用来保护对 "),t("code",[s._v("allPools")]),s._v(" 的读写操作：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保护 allPools 和 oldPools 的互斥锁。")]),s._v("\n   allPoolsMu Mutex\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allPools is the set of pools that have non-empty primary")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// caches. Protected by either 1) allPoolsMu and pinning or 2)")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// STW.")]),s._v("\n   allPools "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Pool\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// oldPools is the set of pools that may have non-empty victim")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// caches. Protected by STW.")]),s._v("\n   oldPools "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Pool\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("code",[s._v("pinSlow")]),s._v(" 方法中会在 "),t("code",[s._v("allPoolsMu")]),s._v(" 的保护下对 "),t("code",[s._v("allPools")]),s._v(" 做读写操作：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Pool"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pinSlow")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("poolLocal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Retry under the mutex.")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Can not lock the mutex while pinned.")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("runtime_procUnpin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   allPoolsMu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取锁")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defer")]),s._v(" allPoolsMu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 函数返回的时候释放锁")]),s._v("\n   pid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("runtime_procPin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// poolCleanup won't be called while we are pinned.")]),s._v("\n   s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("localSize\n   l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("local\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uintptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("indexLocal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" pid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" pid\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("local "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      allPools "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("allPools"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 全局变量修改")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If GOMAXPROCS changes between GCs, we re-allocate the array and lose the old one.")]),s._v("\n   size "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" runtime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("GOMAXPROCS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   local "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("poolLocal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   atomic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("StorePointer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("local"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Pointer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("local"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// store-release")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("runtime_StoreReluintptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("localSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uintptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// store-release")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("local"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" pid\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("这个例子主要是为了说明使用 "),t("code",[s._v("mu")]),s._v(" 的另外一种非常常见的场景："),t("strong",[s._v("并发读写全局变量")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"互斥锁使用的注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#互斥锁使用的注意事项"}},[s._v("#")]),s._v(" 互斥锁使用的注意事项")]),s._v(" "),t("p",[s._v("互斥锁如果使用不当，可能会导致死锁或者出现 "),t("code",[s._v("panic")]),s._v(" 的情况，下面是一些常见的错误：")]),s._v(" "),t("ol",[t("li",[s._v("忘记使用 "),t("code",[s._v("Unlock")]),s._v(" 释放锁。")]),s._v(" "),t("li",[t("code",[s._v("Lock")]),s._v(" 之后还没 "),t("code",[s._v("Unlock")]),s._v(" 之前又使用 "),t("code",[s._v("Lock")]),s._v(" 获取锁。也就是重复上锁，go 中的 "),t("code",[s._v("Mutex")]),s._v(" 不可重入。")]),s._v(" "),t("li",[s._v("死锁：位于临界区内不同的两个协程都想获取对方持有的不同的锁。")]),s._v(" "),t("li",[s._v("还没 "),t("code",[s._v("Lock")]),s._v(" 之前就 "),t("code",[s._v("Unlock")]),s._v("。这会导致 "),t("code",[s._v("panic")]),s._v("，因为这是没有任何意义的。")]),s._v(" "),t("li",[s._v("复制 "),t("code",[s._v("Mutex")]),s._v("，比如将 "),t("code",[s._v("Mutex")]),s._v(" 作为参数传递。")])]),s._v(" "),t("p",[s._v("对于第 1 点，我们往往可以使用 "),t("code",[s._v("defer")]),s._v(" 关键字来做释放锁的操作。第 2 点不太好发现，只能在开发的时候多加注意。 第 3 点我们在使用锁的时候可以考虑尽量避免在临界区内再去使用别的锁。 最后，"),t("code",[s._v("Mutex")]),s._v(" 是不可以复制的，这个可以在编译之前通过 "),t("code",[s._v("go vet")]),s._v(" 来做检查。")]),s._v(" "),t("p",[s._v("为什么 "),t("code",[s._v("Mutex")]),s._v(" 不能被复制呢？因为 "),t("code",[s._v("Mutex")]),s._v(" 中包含了锁的状态，如果复制了，那么这个状态也会被复制， 如果在复制前进行 "),t("code",[s._v("Lock")]),s._v("，复制后进行 "),t("code",[s._v("Unlock")]),s._v("，那就意味着 "),t("code",[s._v("Lock")]),s._v(" 和 "),t("code",[s._v("Unlock")]),s._v(" 操作的其实是两个不同的状态， 这样显然是不行的，是释放不了锁的。")]),s._v(" "),t("blockquote",[t("p",[s._v("虽然不可以复制，但是我们可以通过传递指针类型的参数来传递 "),t("code",[s._v("Mutex")]),s._v("。")])]),s._v(" "),t("h2",{attrs:{id:"互斥锁锁定的是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#互斥锁锁定的是什么"}},[s._v("#")]),s._v(" 互斥锁锁定的是什么？")]),s._v(" "),t("p",[s._v("在前一篇文章中，我们提到过，原子操作本质上是变量级的互斥锁。而互斥锁本身锁定的又是什么呢？ 其实互斥锁本质上是一个信号量，它通过获取释放信号量，最终使得协程获得某一个代码块的执行权力。")]),s._v(" "),t("blockquote",[t("p",[s._v("也就是说，互斥锁，锁定的是一块代码块。")])]),s._v(" "),t("p",[s._v("我们以 "),t("code",[s._v("go-zero")]),s._v(" 里面的 "),t("code",[s._v("collection/fifo.go")]),s._v(" 为例子说明一下：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Take takes the first element out of q if not empty.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("q "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Queue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Take")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("any"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取互斥锁（只能有一个协程获取到锁）")]),s._v("\n   q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 函数返回的时候释放互斥锁（获取到锁的协程释放锁之后，其他协程才能进行抢占锁）")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defer")]),s._v(" q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下面的代码只有抢占到（也就是互斥锁锁定的代码块）")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n   element "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("elements"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("elements"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("除了锁定代码块的这一个作用，有另外一个比较关键的地方也是我们不能忽视的， 那就是 "),t("strong",[s._v("互斥锁并不保证临界区内操作的变量不能被其他协程访问。")]),s._v(" 互斥锁只能保证一段代码只能一个协程执行，但是对于临界区内涉及的共享资源， 你在临界区外也依然是可以对其进行读写的。")]),s._v(" "),t("p",[s._v("我们以上面的代码说明一下：在上面的 "),t("code",[s._v("Take")]),s._v(" 函数中，我们对 "),t("code",[s._v("q.head")]),s._v(" 和 "),t("code",[s._v("q.count")]),s._v(" 都进行了操作， 虽然这些操作代码位于临界区内，但是临界区并不保证持有锁期间其他协程不会在临界区外去修改 "),t("code",[s._v("q.head")]),s._v(" 和 "),t("code",[s._v("q.count")]),s._v("。")]),s._v(" "),t("p",[s._v("下面就是一个非常典型的"),t("strong",[s._v("错误")]),s._v("的例子：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fmt"')]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sync"')]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"testing"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" mu sync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Mutex\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" sum "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在锁的保护下对 sum 做读写操作")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   mu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   sum"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\n   mu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("TestMutex")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("testing"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" wg sync"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("WaitGroup\n   wg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("go")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         wg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Done")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 位于临界区外，也依然是可以对 sum 做读写操作的。")]),s._v("\n      sum"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n   wg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Wait")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sum"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br")])]),t("blockquote",[t("p",[s._v("靠谱的做法是，对于有共享资源的读写的操作都使用 "),t("code",[s._v("Mutex")]),s._v(" 保护起来。")])]),s._v(" "),t("p",[s._v("当然，如果我们只有一个变量，那么可能使用原子操作就足够了。")]),s._v(" "),t("h2",{attrs:{id:"互斥锁实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#互斥锁实现原理"}},[s._v("#")]),s._v(" 互斥锁实现原理")]),s._v(" "),t("p",[s._v("互斥锁的实现有以下几个关键的地方：")]),s._v(" "),t("ul",[t("li",[s._v("信号量：这是操作系统中的同步对象。")]),s._v(" "),t("li",[s._v("等待队列：获取不到互斥锁的协程，会放入到一个先入先出队列的队列尾部。这样信号量释放的时候，可以依次对它们唤醒。")]),s._v(" "),t("li",[s._v("原子操作：互斥锁的实现中，使用了一个字段来记录了几种不同的状态，使用原子操作可以保证几种状态可以一次性变更完成。")])]),s._v(" "),t("p",[s._v("我们先来看看 "),t("code",[s._v("Mutex")]),s._v("结构体定义：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" Mutex "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   state "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int32")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 状态字段")]),s._v("\n   sema  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 信号量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("其中 "),t("code",[s._v("state")]),s._v(" 字段记录了四种不同的信息：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/go/mutex/2.webp",alt:"mutex_2.png"}})]),s._v(" "),t("p",[s._v("这四种不同信息在源码中定义了不同的常量：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n   mutexLocked      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("iota")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表示有 goroutine 拥有锁")]),s._v("\n   mutexWoken                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 唤醒（就是第 2 位）")]),s._v("\n   mutexStarving                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 饥饿（第 3 位）")]),s._v("\n   mutexWaiterShift "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("iota")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表示第 4 位开始，表示等待者的数量")]),s._v("\n\n   starvationThresholdNs "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1e6")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1ms 进入饥饿模式的等待时间阈值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("而 "),t("code",[s._v("sema")]),s._v(" 的含义比较简单，就是一个用作不同 goroutine 同步的信号量。")]),s._v(" "),t("h3",{attrs:{id:"信号量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#信号量"}},[s._v("#")]),s._v(" 信号量")]),s._v(" "),t("p",[s._v("go 的 "),t("code",[s._v("Mutex")]),s._v(" 是基于信号量来实现的，那信号量又是什么呢？")]),s._v(" "),t("blockquote",[t("p",[s._v("维基百科：信号量是一个同步对象，用于保持在 "),t("code",[s._v("0")]),s._v(" 至指定最大值之间的一个计数值。当线程完成一次对该 "),t("code",[s._v("semaphore")]),s._v(" 对象的等待（"),t("code",[s._v("wait")]),s._v("）时，该计数值减一；当线程完成一次对 "),t("code",[s._v("semaphore")]),s._v(" 对象的释放（"),t("code",[s._v("release")]),s._v("）时，计数值加一。")])]),s._v(" "),t("p",[s._v("上面这个解释有点难懂，通俗地说，就是一个数字，调用 "),t("code",[s._v("wait")]),s._v(" 的时候，这个数字减去 "),t("code",[s._v("1")]),s._v("，调用 "),t("code",[s._v("release")]),s._v(" 的时候，这个数字加上 "),t("code",[s._v("1")]),s._v("。 （还有一个隐含的逻辑是，如果这个数小于 "),t("code",[s._v("0")]),s._v("，那么调用 "),t("code",[s._v("wait")]),s._v(" 的时候会阻塞，直到它大于 "),t("code",[s._v("0")]),s._v("。）")]),s._v(" "),t("p",[s._v("对应到 go 的 "),t("code",[s._v("Mutex")]),s._v(" 中，有两个操作信号量的函数：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("runtime_Semrelease")]),s._v(": 自动递增信号量并通知等待的 goroutine。")]),s._v(" "),t("li",[t("code",[s._v("runtime_SemacquireMutex")]),s._v(": 是一直等到信号量大于 0，然后自动递减。")])]),s._v(" "),t("p",[s._v("我们注意到了，其实 "),t("code",[s._v("runtime_SemacquireMutex")]),s._v(" 是有一个前提条件的，那就是等到信号量大于 0。 其实信号量的两个操作 "),t("code",[s._v("P/V")]),s._v(" 就是一个加 1 一个减 1，所以在实际使用的时候，也是需要一个获取锁的操作对应一个释放锁的操作， 否则，其他协程都无法获取到锁，因为信号量一直不满足。")]),s._v(" "),t("h3",{attrs:{id:"等待队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#等待队列"}},[s._v("#")]),s._v(" 等待队列")]),s._v(" "),t("p",[s._v("go 中如果已经有 goroutine 持有互斥锁，那么其他的协程会放入一个 "),t("code",[s._v("FIFO")]),s._v(" 队列中，如下图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/go/mutex/3.webp",alt:"mutex_3.png"}})]),s._v(" "),t("p",[s._v("说明：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("G1")]),s._v(" 表示持有互斥锁的 goroutine，"),t("code",[s._v("G2")]),s._v("..."),t("code",[s._v("Gn")]),s._v(" 表示一个 goroutine 的等待队列，这是一个先入先出的队列。")]),s._v(" "),t("li",[t("code",[s._v("G1")]),s._v(" 先持有锁，得以进入临界区，其他想抢占锁的 goroutine 阻塞在 "),t("code",[s._v("Lock")]),s._v(" 调用处。")]),s._v(" "),t("li",[t("code",[s._v("G1")]),s._v(" 在使用完锁后，会使用 "),t("code",[s._v("Unlock")]),s._v(" 来释放锁，本质上是释放了信号量，然后会唤醒 "),t("code",[s._v("FIFO")]),s._v(" 队列头部的 "),t("code",[s._v("goroutine")]),s._v("。")]),s._v(" "),t("li",[t("code",[s._v("G2")]),s._v(" 从 "),t("code",[s._v("FIFO")]),s._v(" 队列中移除，进入临界区。"),t("code",[s._v("G2")]),s._v(" 使用完锁之后也会使用 "),t("code",[s._v("Unlock")]),s._v(" 来释放锁。")])]),s._v(" "),t("blockquote",[t("p",[s._v("上面只是一个大概模型，在实际实现中，比这个复杂很多倍，下面会继续深入讲解。")])]),s._v(" "),t("h3",{attrs:{id:"原子操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原子操作"}},[s._v("#")]),s._v(" 原子操作")]),s._v(" "),t("p",[s._v("go 的 "),t("code",[s._v("Mutex")]),s._v(" 实现中，"),t("code",[s._v("state")]),s._v(" 字段是一个 32 位的整数，不同的位记录了四种不同信息，在这种情况下， 只需要通过原子操作就可以保证一次性实现对四种不同状态信息的更改，而不需要更多额外的同步机制。")]),s._v(" "),t("p",[s._v("但是毋庸置疑，这种实现会大大降低代码的可读性，因为通过一个整数来记录不同的信息， 就意味着，需要通过各种位运算来实现对这个整数不同位的修改，比如将上锁的操作：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|=")]),s._v(" mutexLocked\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("当然，这只是 "),t("code",[s._v("Mutex")]),s._v(" 实现中最简单的一种位运算了。下面以 "),t("code",[s._v("state")]),s._v(" 记录的四种不同信息为维度来具体讲解一下：")]),s._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mutexLocked\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("：这是")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("state\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("的最低位，")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("表示锁被占用，")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("表示锁没有被占用。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("new := mutexLocked")]),s._v(" 新状态为上锁状态")])])]),s._v(" "),t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mutexWoken\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v(": 这是表示是否有协程被唤醒了的状态")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("new = (old - 1<<mutexWaiterShift) | mutexWoken")]),s._v(" 等待者数量减去 1 的同时，设置唤醒标识")]),s._v(" "),t("li",[t("code",[s._v("new &^= mutexWoken")]),s._v(" 清除唤醒标识")])])]),s._v(" "),t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mutexStarving\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("：饥饿模式的标识")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("new |= mutexStarving")]),s._v(" 设置饥饿标识")])])]),s._v(" "),t("li",[t("p",[s._v("等待者数量：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("state >> mutexWaiterShift\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("就是等待者的数量，也就是上面提到的")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("FIFO\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("队列中 goroutine 的数量")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("new += 1 << mutexWaiterShift")]),s._v(" 等待者数量加 1")]),s._v(" "),t("li",[t("code",[s._v("delta := int32(mutexLocked - 1<<mutexWaiterShift)")]),s._v(" 上锁的同时，将等待者数量减 1")])])])]),s._v(" "),t("blockquote",[t("p",[s._v("这里并没有涵盖 "),t("code",[s._v("Mutex")]),s._v(" 中所有的位运算，其他操作在下文讲解源码实现的时候会提到。")])]),s._v(" "),t("p",[s._v("在上面做了这一系列的位运算之后，我们会得到一个新的 "),t("code",[s._v("state")]),s._v(" 状态，假设名为 "),t("code",[s._v("new")]),s._v("，那么我们就可以通过 "),t("code",[s._v("CAS")]),s._v(" 操作来将 "),t("code",[s._v("Mutex")]),s._v(" 的 "),t("code",[s._v("state")]),s._v(" 字段更新：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[s._v("atomic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CompareAndSwapInt32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("通过上面这个原子操作，我们就可以一次性地更新 "),t("code",[s._v("Mutex")]),s._v(" 的 "),t("code",[s._v("state")]),s._v(" 字段，也就是一次性更新了四种状态信息。")]),s._v(" "),t("blockquote",[t("p",[s._v("这种通过一个整数记录不同状态的写法在 "),t("code",[s._v("sync")]),s._v(" 包其他的一些地方也有用到，比如 "),t("code",[s._v("WaitGroup")]),s._v(" 中的 "),t("code",[s._v("state")]),s._v(" 字段。")])]),s._v(" "),t("p",[s._v("最后，对于这种操作，我们需要注意的是，因为我们在执行 "),t("code",[s._v("CAS")]),s._v(" 前后是没有其他什么锁或者其他的保护机制的， 这也就意味着上面的这个 "),t("code",[s._v("CAS")]),s._v(" 操作是有可能会失败的，那如果失败了怎么办呢？")]),s._v(" "),t("p",[s._v("如果失败了，也就意味着肯定有另外一个 goroutine 率先执行了 "),t("code",[s._v("CAS")]),s._v(" 操作并且成功了，将 "),t("code",[s._v("state")]),s._v(" 修改为了一个新的值。 这个时候，其实我们前面做的一系列位运算得到的结果实际上已经不对了，在这种情况下，"),t("strong",[s._v("我们需要获取最新的 "),t("code",[s._v("state")]),s._v("，然后再次计算得到一个新的 "),t("code",[s._v("state")]),s._v("。")])]),s._v(" "),t("p",[s._v("所以我们会在源码里面看到 "),t("code",[s._v("CAS")]),s._v(" 操作是写在 "),t("code",[s._v("for")]),s._v(" 循环里面的。")]),s._v(" "),t("h2",{attrs:{id:"mutex-的公平性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mutex-的公平性"}},[s._v("#")]),s._v(" Mutex 的公平性")]),s._v(" "),t("p",[s._v("在前面，我们提到 goroutien 获取不到锁的时候，会进入一个 "),t("code",[s._v("FIFO")]),s._v(" 队列的队列尾，在实际实现中，其实没有那么简单， 为了获得更好的性能，在实现的时候会尽量先让运行状态的 goroutine 获得锁，当然如果队列中的 goroutine 等待太久（大于 1ms）， 那么就会先让队列中的 goroutine 获得锁。")]),s._v(" "),t("p",[s._v("下面是文档中的说明：")]),s._v(" "),t("blockquote",[t("p",[s._v("Mutex 可以处于两种操作模式：正常模式和饥饿模式。在正常模式下，等待者按照FIFO（先进先出）的顺序排队，但是被唤醒的等待者不拥有互斥锁，会与新到达的 Goroutine 竞争所有权。新到达的 Goroutine 有优势——它们已经在 CPU 上运行，数量可能很多，因此被唤醒的等待者有很大的机会失去锁。在这种情况下，它将排在等待队列的前面。如果等待者未能在1毫秒内获取到互斥锁，则将互斥锁切换到饥饿模式。 在饥饿模式下，互斥锁的所有权直接从解锁 Goroutine 移交给队列前面的等待者。新到达的 Goroutine 即使看起来未被锁定，也不会尝试获取互斥锁，也不会尝试自旋。相反，它们会将自己排队在等待队列的末尾。如果等待者获得互斥锁的所有权并发现（1）它是队列中的最后一个等待者，或者（2）它等待时间少于1毫秒，则将互斥锁切换回正常模式。 正常模式的性能要优于饥饿模式，因为 Goroutine 可以连续多次获取互斥锁，即使有被阻塞的等待者。饥饿模式很重要，可以防止尾部延迟的病态情况。")])]),s._v(" "),t("p",[s._v("简单总结：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Mutex")]),s._v(" 有两种模式：正常模式、饥饿模式。")]),s._v(" "),t("li",[s._v("正常模式下：\n"),t("ul",[t("li",[s._v("被唤醒的 goroutine 和正在运行的 goroutine 竞争锁。这样可以运行中的协程有机会先获取到锁，从而避免了协程切换的开销。性能更好。")])])]),s._v(" "),t("li",[s._v("饥饿模式下：\n"),t("ul",[t("li",[s._v("优先让队列中的 goroutine 获得锁，并且直接放弃时间片，让给队列中的 goroutine，运行中的 goroutine 想获取锁要到队尾排队。更加公平。")])])])]),s._v(" "),t("h2",{attrs:{id:"mutex-源码剖析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mutex-源码剖析"}},[s._v("#")]),s._v(" Mutex 源码剖析")]),s._v(" "),t("p",[t("code",[s._v("Mutex")]),s._v(" 本身的源码其实很少，但是复杂程度是非常高的，所以第一次看的时候可能会非常懵逼，但是不妨碍我们去了解它的大概实现原理。")]),s._v(" "),t("p",[t("code",[s._v("Mutex")]),s._v(" 中主要有两个方法，"),t("code",[s._v("Lock")]),s._v(" 和 "),t("code",[s._v("Unlock")]),s._v("，使用起来非常的简单，但是它的实现可不简单。下面我们就来深入了解一下它的实现。")]),s._v(" "),t("h3",{attrs:{id:"lock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lock"}},[s._v("#")]),s._v(" Lock")]),s._v(" "),t("p",[t("code",[s._v("Lock")]),s._v(" 方法的实现如下：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Lock 获取锁。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果锁已在使用中，则调用 goroutine 将阻塞，直到互斥量可用。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("m "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Fast path: grab unlocked mutex.")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 上锁成功则直接返回")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" atomic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CompareAndSwapInt32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mutexLocked"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Slow path (outlined so that the fast path can be inlined)")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没有上锁成功，这个时候需要做的事情就有点多了。")]),s._v("\n   m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lockSlow")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("在 "),t("code",[s._v("Lock")]),s._v(" 方法中，第一次获取锁的时候是非常简单的，一个简单的原子操作设置一下 "),t("code",[s._v("mutexLocked")]),s._v(" 标识就完成了。 但是如果这个原子操作失败了，表示有其他 goroutine 先获取到了锁，这个时候就需要调用 "),t("code",[s._v("lockSlow")]),s._v(" 来做一些额外的操作了：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取 mutex 锁")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("m "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lockSlow")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" waitStartTime "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int64")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前协程开始等待的时间")]),s._v("\n   starving "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前协程是否是饥饿模式")]),s._v("\n   awoke "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 唤醒标志（是否当前协程就是被唤醒的协程）")]),s._v("\n   iter "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 自旋次数（超过一定次数如果还没能获得锁，就进入等待）")]),s._v("\n   old "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 旧的状态，每次 for 循环会重新获取当前的状态字段")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 自旋：目的是让正在运行中的 goroutine 尽快获取到锁。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 两种情况不会自旋：")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 饥饿模式：在饥饿模式下，锁会直接交给等待队列中的 goroutine，所以不会自旋。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 锁被释放了：另外如果运行到这里的时候，发现锁已经被释放了，也就不需要自旋了。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mutexLocked"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("mutexStarving"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" mutexLocked "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("runtime_canSpin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("iter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置 mutexWoken 标识")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果自旋是有意义的，则会进入到这里，尝试设置 mutexWoken 标识。")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置成功在持有锁的 goroutine 获取锁的时候不会唤醒等待队列中的 goroutine，下一个获取锁的就是当前 goroutine。")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("awoke "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("mutexWoken "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v("mutexWaiterShift "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v("\n            atomic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CompareAndSwapInt32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("mutexWoken"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 各个判断的含义：")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// !awoke 已经被唤醒过一次了，说明当前协程是被从等待队列中唤醒的协程/又或者已经成功设置 mutexWoken 标识了，不需要再唤醒了。")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// old&mutexWoken == 0 如果不等于 0 说明有 goroutine 被唤醒了，不会尝试设置 mutexWoken 标识")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// old>>mutexWaiterShift != 0 如果等待队列为空，当前 goroutine 就是下一个抢占锁的 goroutine")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前面的判断都通过了，才会进行 CAS 操作尝试设置 mutexWoken 标识")]),s._v("\n            awoke "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("runtime_doSpin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 自旋")]),s._v("\n         iter"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 自旋次数 +1（超过一定次数会停止自旋）")]),s._v("\n         old "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 再次获取锁的最新状态，之后会检查是否锁被释放了")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 继续下一次检查")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" old\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 饥饿模式下，新到达的 goroutines 必须排队。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不是饥饿状态，直接竞争锁。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("mutexStarving "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|=")]),s._v(" mutexLocked\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进入等待队列的两种情况：")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 锁依然被占用。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 进入了饥饿模式。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mutexLocked"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("mutexStarving"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" mutexWaiterShift "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等待者数量 +1")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 已经等待超过了 1ms，且锁被其他协程占用，则进入饥饿模式")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" starving "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("mutexLocked "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|=")]),s._v(" mutexStarving\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 唤醒之后，需要重置唤醒标志。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不管有没有获取到锁，都是要清除这个标识的：")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取到锁肯定要清除，如果获取到锁，需要让其他运行中的 goroutine 来抢占锁；")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果没有获取到锁，goroutine 会阻塞，这个时候是需要持有锁的 goroutine 来唤醒的，如果有 mutexWoken 标识，持有锁的 goroutine 唤醒不了。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" awoke "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("mutexWoken "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("throw")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sync: inconsistent mutex state"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&^=")]),s._v(" mutexWoken "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 重置唤醒标志")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 成功设置新状态")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" atomic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CompareAndSwapInt32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 原来锁的状态已释放，并且不是饥饿状态，正常请求到了锁，返回")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mutexLocked"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("mutexStarving"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这意味着当前的 goroutine 成功获取了锁")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果已经被唤醒过，会被加入到等待队列头。")]),s._v("\n         queueLifo "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" waitStartTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" waitStartTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            waitStartTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("runtime_nanotime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 阻塞等待")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// queueLifo 为 true，表示加入到队列头。否则，加入到队列尾。")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (首次加入队列加入到队尾，不是首次加入则加入队头，这样等待最久的 goroutine 优先能够获取到锁。)")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("runtime_SemacquireMutex")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sema"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" queueLifo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从等待队列中唤醒，检查锁是否应该进入饥饿模式。")]),s._v("\n         starving "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" starving "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("runtime_nanotime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("waitStartTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" starvationThresholdNs\n\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取当前的锁最新状态")]),s._v("\n         old "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果锁已经处于饥饿状态，直接抢到锁，返回。")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 饥饿模式下，被唤醒的协程可以直接获取到锁。")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 新来的 goroutine 都需要进入队列等待。")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("mutexStarving "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果这个 goroutine 被唤醒并且 Mutex 处于饥饿模式，P 的所有权已经移交给我们，")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 但 Mutex 处于不一致的状态：mutexLocked 未设置，我们仍然被视为等待者。修复这个问题。")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mutexLocked"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("mutexWoken"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v("mutexWaiterShift "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n               "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("throw")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sync: inconsistent mutex state"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 加锁，并且减少等待者数量。")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实际上是两步操作合成了一步：")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. m.state = m.state + 1 （获取锁）")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. m.state = m.state - 1<<mutexWaiterShift（waiter - 1）")]),s._v("\n            delta "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("int32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mutexLocked "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("mutexWaiterShift"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 清除饥饿状态的两种情况：")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 如果不需要进入饥饿模式（当前被唤醒的 goroutine 的等待时间小于 1ms）")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 原来的等待者数量为 1，说明是最后一个被唤醒的 goroutine。")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("starving "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v("mutexWaiterShift "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 退出饥饿模式")]),s._v("\n               delta "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-=")]),s._v(" mutexStarving\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 原子操作，设置新状态。")]),s._v("\n            atomic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddInt32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" delta"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置唤醒标记，重新抢占锁（会与那些运行中的 goroutine 一起竞争锁）")]),s._v("\n         awoke "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n         iter "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// CAS 更新状态失败，获取最新状态，然后重试")]),s._v("\n         old "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br"),t("span",{staticClass:"line-number"},[s._v("100")]),t("br"),t("span",{staticClass:"line-number"},[s._v("101")]),t("br"),t("span",{staticClass:"line-number"},[s._v("102")]),t("br"),t("span",{staticClass:"line-number"},[s._v("103")]),t("br"),t("span",{staticClass:"line-number"},[s._v("104")]),t("br"),t("span",{staticClass:"line-number"},[s._v("105")]),t("br"),t("span",{staticClass:"line-number"},[s._v("106")]),t("br"),t("span",{staticClass:"line-number"},[s._v("107")]),t("br"),t("span",{staticClass:"line-number"},[s._v("108")]),t("br"),t("span",{staticClass:"line-number"},[s._v("109")]),t("br"),t("span",{staticClass:"line-number"},[s._v("110")]),t("br"),t("span",{staticClass:"line-number"},[s._v("111")]),t("br"),t("span",{staticClass:"line-number"},[s._v("112")]),t("br"),t("span",{staticClass:"line-number"},[s._v("113")]),t("br"),t("span",{staticClass:"line-number"},[s._v("114")]),t("br")])]),t("p",[s._v("我们可以看到，"),t("code",[s._v("lockSlow")]),s._v(" 的处理非常的复杂，又要考虑让运行中的 goroutine 尽快获取到锁，又要考虑不能让等待队列中的 goroutine 等待太久。")]),s._v(" "),t("p",[s._v("代码中注释很多，再简单总结一下其中的流程：")]),s._v(" "),t("ol",[t("li",[s._v("为了让循环中的 goroutine 可以先获取到锁，会先让 goroutine 自旋等待锁的释放，这是因为运行中的 goroutine 正在占用 CPU，让它先获取到锁可以避免一些不必要的协程切换，从而获得更好的性能。")]),s._v(" "),t("li",[s._v("自旋完毕之后，会尝试获取锁，同时也要根据旧的锁状态来更新锁的不同状态信息，比如是否进入饥饿模式等。")]),s._v(" "),t("li",[s._v("计算得到一个新的 "),t("code",[s._v("state")]),s._v(" 后，会进行 "),t("code",[s._v("CAS")]),s._v(" 操作尝试更新 "),t("code",[s._v("state")]),s._v(" 状态。")]),s._v(" "),t("li",[t("code",[s._v("CAS")]),s._v(" 失败会重试上面的流程。")]),s._v(" "),t("li",[t("code",[s._v("CAS")]),s._v(" 成功之后会做如下操作：")])]),s._v(" "),t("ul",[t("li",[s._v("判断当前是否已经获取到锁，如果是，则返回，"),t("code",[s._v("Lock")]),s._v(" 成功了。")]),s._v(" "),t("li",[s._v("会判断当前的 goroutine 是否是已经被唤醒过，如果是，会将当前 goroutine 加入到等待队列头部。")]),s._v(" "),t("li",[s._v("调用 "),t("code",[s._v("runtime_SemacquireMutex")]),s._v("，进入阻塞状态，等待下一次唤醒。")]),s._v(" "),t("li",[s._v("唤醒之后，判断是否需要进入饥饿模式。")]),s._v(" "),t("li",[s._v("最后，如果已经是饥饿模式，当前 goroutine 直接获取到锁，退出循环，否则，再进行下一次抢占锁的循环中。")])]),s._v(" "),t("p",[s._v("具体流程我们可以参考一下下面的流程图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/go/mutex/4.webp",alt:"mutex_4.png"}})]),s._v(" "),t("blockquote",[t("p",[s._v("图中有一些矩形方框描述了 "),t("code",[s._v("unlockSlow")]),s._v(" 的关键流程。")])]),s._v(" "),t("h3",{attrs:{id:"unlock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unlock"}},[s._v("#")]),s._v(" Unlock")]),s._v(" "),t("p",[t("code",[s._v("Unlock")]),s._v(" 方法的实现如下：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Unlock 释放互斥锁。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果 m 在进入 Unlock 时未被锁定，则会出现运行时错误。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("m "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Fast path: drop lock bit.")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// unlock 成功")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// unLock 操作实际上是将 state 减去 1。")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" atomic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddInt32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("mutexLocked"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等待队列为空的时候直接返回了")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 唤醒一个等待锁的 goroutine")]),s._v("\n      m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlockSlow")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[t("code",[s._v("Unlock")]),s._v(" 做了两件事：")]),s._v(" "),t("ol",[t("li",[s._v("释放当前 goroutine 持有的互斥锁：也就是将 "),t("code",[s._v("state")]),s._v(" 减去 1")]),s._v(" "),t("li",[s._v("唤醒等待队列中的下一个 goroutine")])]),s._v(" "),t("p",[s._v("如果只有一个 goroutine 在使用锁，只需要简单地释放锁就可以了。 但是如果有其他的 goroutine 在阻塞等待，那么持有互斥锁的 goroutine 就有义务去唤醒下一个 goroutine。")]),s._v(" "),t("p",[s._v("唤醒的流程相对复杂一些：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// unlockSlow 唤醒下一个等待锁的协程。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("m "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlockSlow")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果未加锁，则会抛出错误。")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("mutexLocked"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("mutexLocked "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fatal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sync: unlock of unlocked mutex"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下面的操作是唤醒一个在等待锁的协程。")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 存在两种情况：")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 正常模式：")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  a. 不需要唤醒：没有等待者、锁已经被抢占、有其他运行中的协程在尝试获取锁、已经进入了饥饿模式")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   b. 需要唤醒：其他情况")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 饥饿模式：唤醒等待队列头部的那个协程")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("mutexStarving "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不是饥饿模式")]),s._v("\n      old "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 自旋")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下面几种情况不需要唤醒：")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 没有等待者了（没得唤醒）")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 锁已经被占用（只能有一个 goroutine 持有锁）")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3. 有其他运行中的协程已经被唤醒（运行中的 goroutine 通过自旋先抢占到了锁）")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4. 饥饿模式（饥饿模式下，所有新的 goroutine 都要排队，饥饿模式会直接唤醒等待队列头部的 gorutine）")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v("mutexWaiterShift "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mutexLocked"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("mutexWoken"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("mutexStarving"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取到唤醒等待者的权力，开始唤醒一个等待者。")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下面这一行实际上是两个操作：")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. waiter 数量 - 1")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 设置 mutexWoken 标志")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("old "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("mutexWaiterShift"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" mutexWoken\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" atomic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CompareAndSwapInt32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正常模式下唤醒了一个 goroutine")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//（第二个参数为 false，表示当前的 goroutine 在释放信号量后还会继续执行直到用完时间片）")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("runtime_Semrelease")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sema"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 唤醒失败，进行下一次尝试。")]),s._v("\n         old "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 饥饿模式：将互斥锁的所有权移交给下一个等待者，并放弃我们的时间片，以便下一个等待者可以立即开始运行。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注意：如果“mutexLocked”未设置，等待者在唤醒后会将其设置。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 但是，如果设置了“mutexStarving”，则仍然认为互斥锁已被锁定，因此新到来的goroutine不会获取它。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前的 goroutine 放弃 CPU 时间片，让给阻塞在 sema 的 goroutine。")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("runtime_Semrelease")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sema"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br")])]),t("p",[t("code",[s._v("unlockSlow")]),s._v(" 逻辑相比 "),t("code",[s._v("lockSlow")]),s._v(" 要简单许多，我们可以再结合下面的流程图来阅读上面的源码：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/go/mutex/5.webp",alt:"mutex_5.png"}})]),s._v(" "),t("h4",{attrs:{id:"runtime-semrelease-第二个参数的含义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#runtime-semrelease-第二个参数的含义"}},[s._v("#")]),s._v(" runtime_Semrelease 第二个参数的含义")]),s._v(" "),t("p",[s._v("细心的朋友可能注意到了，在 "),t("code",[s._v("unlockSlow")]),s._v(" 的实现中，有两处地方调用了 "),t("code",[s._v("runtime_Semrelease")]),s._v(" 这个方法， 这个方法的作用是释放一个信号量，这样可以让阻塞在信号量上的 goroutine 得以继续执行。 它的第一个参数我们都知道，是信号量，而第二个参数 "),t("code",[s._v("true")]),s._v(" 和 "),t("code",[s._v("false")]),s._v(" 分别传递了一次， 那么 "),t("code",[s._v("true")]),s._v(" 和 "),t("code",[s._v("false")]),s._v(" 分别有什么作用呢？")]),s._v(" "),t("p",[s._v("答案是，设置为 "),t("code",[s._v("true")]),s._v(" 的时候，当前的 goroutine 会直接放弃自己的时间片， 将 P 的使用权交给 "),t("code",[s._v("Mutex")]),s._v(" 等待队列中的第一个 goroutine， 这样的目的是，让 "),t("code",[s._v("Mutex")]),s._v(" 等待队列中的 goroutine 可以尽快地获取到锁。")]),s._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("互斥锁在并发编程中也算是非常常见的一种操作了，使用互斥锁可以限制只有一个 goroutine 可以进入临界区， 这对于并发修改全局变量、初始化等情况非常好用。最后，再总结一下本文所讲述的内容：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("互斥锁是一种用于多线程编程中，防止两个线程同时对同一公共资源进行读写的机制。go 中的互斥锁实现是 "),t("code",[s._v("sync.Mutex")]),s._v("。")])]),s._v(" "),t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Mutex\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("的操作只有两个：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Lock")]),s._v(" 获取锁，同一时刻只能有一个 goroutine 可以获取到锁，其他 goroutine 会先通过自旋抢占锁，抢不到则阻塞等待。")]),s._v(" "),t("li",[t("code",[s._v("Unlock")]),s._v(" 释放锁，释放锁之前必须有 goroutine 持有锁。释放锁之后，会唤醒等待队列中的下一个 goroutine。")])])]),s._v(" "),t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Mutex\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("常见的使用场景有两个：")]),s._v(" "),t("ul",[t("li",[s._v("并发读写 "),t("code",[s._v("map")]),s._v("：如 "),t("code",[s._v("gin")]),s._v(" 中 "),t("code",[s._v("Context")]),s._v(" 的 "),t("code",[s._v("Keys")]),s._v(" 属性的读写。")]),s._v(" "),t("li",[s._v("并发读写全局变量：如 "),t("code",[s._v("sync.Pool")]),s._v(" 中对 "),t("code",[s._v("allPools")]),s._v(" 的读写。")])])]),s._v(" "),t("li",[t("p",[s._v("使用")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Mutex\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("需要注意以下几点：")]),s._v(" "),t("ul",[t("li",[s._v("不要忘记使用 "),t("code",[s._v("Unlock")]),s._v(" 释放锁")]),s._v(" "),t("li",[t("code",[s._v("Lock")]),s._v(" 之后，没有释放锁之前，不能再次使用 "),t("code",[s._v("Lock")])]),s._v(" "),t("li",[s._v("注意不同 goroutine 竞争不同锁的情况，需要考虑一下是否有可能会死锁")]),s._v(" "),t("li",[s._v("在 "),t("code",[s._v("Unlock")]),s._v(" 之前，必须已经调用了 "),t("code",[s._v("Lock")]),s._v("，否则会 "),t("code",[s._v("panic")])]),s._v(" "),t("li",[s._v("在第一次使用 "),t("code",[s._v("Mutex")]),s._v(" 之后，不能复制，因为这样一来 "),t("code",[s._v("Mutex")]),s._v(" 的状态也会被复制。这个可以使用 "),t("code",[s._v("go vet")]),s._v(" 来检查。")])])]),s._v(" "),t("li",[t("p",[s._v("互斥锁可以保护一块代码块只能有一个 goroutine 执行，但是不保证临界区内操作的变量不被其他 goroutine 做并发读写操作。")])]),s._v(" "),t("li",[t("p",[s._v("go 的")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Mutex\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("基于以下技术实现：")]),s._v(" "),t("ul",[t("li",[s._v("信号量：这是操作系统层面的同步机制")]),s._v(" "),t("li",[s._v("队列：在 goroutine 获取不到锁的时候，会将这些 goroutine 放入一个 FIFO 队列中，下次唤醒会唤醒队列头的 goroutine")]),s._v(" "),t("li",[s._v("原子操作："),t("code",[s._v("state")]),s._v(" 字段记录了四种不同的信息，通过原子操作就可以保证数据的完整性")])])]),s._v(" "),t("li",[t("p",[s._v("go")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Mutex\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("的公平性：")]),s._v(" "),t("ul",[t("li",[s._v("正在运行的 goroutine 如果需要锁的话，尽量让它先获取到锁，可以避免不必要的协程上下文切换。会和被唤醒的 goroutine 一起竞争锁。")]),s._v(" "),t("li",[s._v("但是如果等待队列中的 goroutine 超过了 1ms 还没有获取到锁，那么会进入饥饿模式")])])]),s._v(" "),t("li",[t("p",[s._v("go")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Mutex\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("的两种模式：")]),s._v(" "),t("ul",[t("li",[s._v("正常模式：运行中的 goroutine 有一定机会比等待队列中的 goroutine 先获取到锁，这种模式有更好的性能。")]),s._v(" "),t("li",[s._v("饥饿模式：所有后来的 goroutine 都直接进入等待队列，会依次从等待队列头唤醒 goroutine。可以有效避免尾延迟。")])])]),s._v(" "),t("li",[t("p",[s._v("饥饿模式下，"),t("code",[s._v("Unlock")]),s._v(" 的时候会直接将当前 goroutine 所在 P 的使用权交给等待队列头部的 goroutine，放弃原本属于自己的时间片。")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);