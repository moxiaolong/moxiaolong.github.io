(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{356:function(a,s,t){"use strict";t.r(s);var n=t(8),e=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("在上一篇文章中，我们探讨了 go 中 "),s("code",[a._v("sync.Map")]),a._v(" 的一些基本内容，如 "),s("code",[a._v("map")]),a._v(" 并发使用下存在的问题，如何解决这些问题等。 我们也知道了 "),s("code",[a._v("sync.Map")]),a._v(" 的一些基本操作，但是我们还是不知道 "),s("code",[a._v("sync.Map")]),a._v(" 是如何实现的，以及为什么在特定场景下，"),s("code",[a._v("sync.Map")]),a._v(" 比 "),s("code",[a._v("map + Mutex/RWMutex")]),a._v(" 快。 本篇文章就来继续深入探讨 "),s("code",[a._v("sync.Map")]),a._v("，对 "),s("code",[a._v("sync.Map")]),a._v(" 的设计与实现进行更加详尽的讲解。\n")]),a._v(" "),s("blockquote",[s("p",[a._v("本文基于 Go 1.19")])]),a._v(" "),s("h2",{attrs:{id:"sync-map-概览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sync-map-概览"}},[a._v("#")]),a._v(" sync.Map 概览")]),a._v(" "),s("p",[a._v("开始之前，我们先来了解一下 "),s("code",[a._v("sync.Map")]),a._v(" 的数据结构，以及其一个大概的模型。这对于我们了解 "),s("code",[a._v("sync.Map")]),a._v(" 的设计非常有好处。")]),a._v(" "),s("h3",{attrs:{id:"本文用到的一些名词解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本文用到的一些名词解析"}},[a._v("#")]),a._v(" 本文用到的一些名词解析")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("read")]),a._v(" 和 "),s("code",[a._v("read map")]),a._v("：都是指 "),s("code",[a._v("sync.Map")]),a._v(" 中的只读 map，即 "),s("code",[a._v("sync.Map")]),a._v(" 中的 "),s("code",[a._v("m.read")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("dirty")]),a._v(" 和 "),s("code",[a._v("dirty map")]),a._v("：都是指 "),s("code",[a._v("sync.Map")]),a._v(" 中的可写 map，即 "),s("code",[a._v("sync.Map")]),a._v(" 中的 "),s("code",[a._v("m.dirty")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("entry")]),a._v("："),s("code",[a._v("sync.Map")]),a._v(" 中的 "),s("code",[a._v("entry")]),a._v("，这是保存值的结构体，它是一个原子类型的指针。其中的指针指向 "),s("code",[a._v("key")]),a._v(" 对应的值。")])]),a._v(" "),s("h3",{attrs:{id:"sync-map-的数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sync-map-的数据结构"}},[a._v("#")]),a._v(" sync.Map 的数据结构")]),a._v(" "),s("p",[s("code",[a._v("sync.Map")]),a._v(" 的数据结构如下：")]),a._v(" "),s("blockquote",[s("p",[s("code",[a._v("read")]),a._v(" 和 "),s("code",[a._v("dirty")]),a._v(" 是 "),s("code",[a._v("sync.Map")]),a._v(" 中最关键的两个数据结构，它们之间可以相互转化。")])]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 在 sync.Map 中的作用是一个特殊的标记")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" expunged "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// sync.Map")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" Map "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("struct")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 互斥锁")]),a._v("\n   mu     sync"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Mutex\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 只读 map，用于读操作")]),a._v("\n   read   atomic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Pointer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("readOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// dirty map，写入操作会先写入 dirty map")]),a._v("\n   dirty  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("entry\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 记录需要从 dirty map 中读取 key 的次数。")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 也就是没有在 read map 中找到 key 的次数。")]),a._v("\n   misses "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("int")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// readOnly 是一个只读的 map")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" readOnly "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("struct")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   m       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("entry "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// dirty map 中的 key 的一份快照")]),a._v("\n   amended "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("bool")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 记录是否在 dirty map 中有部分 read map 中不存在的 key")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 实际存储值的结构体。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// p 有三种状态：nil, expunged, 正常状态。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" entry "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("struct")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   p atomic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Pointer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br")])]),s("p",[a._v("说明：")]),a._v(" "),s("ul",[s("li",[s("p",[s("code",[a._v("expunged")]),a._v(" 是一个特殊的标记，用于表示 "),s("code",[a._v("entry")]),a._v(" 中的值已经被删除。并且那个 "),s("code",[a._v("key")]),a._v(" 在 "),s("code",[a._v("dirty map")]),a._v(" 中已经不存在了。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("Map")]),a._v(" 也就是我们使用的 "),s("code",[a._v("sync.Map")]),a._v("，它有一个 "),s("code",[a._v("mu")]),a._v(" 互斥锁，用于保护 "),s("code",[a._v("dirty map")]),a._v("。")])]),a._v(" "),s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Map\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("中有两个")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("map\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("，一个是")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("read map\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("，一个是")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("dirty map\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("。")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("read map")]),a._v(" 是一个只读的 "),s("code",[a._v("map")]),a._v("，但不是我们在其他地方说的只读。它的只读的含义是，它的 "),s("code",[a._v("key")]),a._v(" 是不能增加或者删除的。但是 "),s("code",[a._v("value")]),a._v(" 是可以修改的。")]),a._v(" "),s("li",[s("code",[a._v("dirty map")]),a._v(" 是一个可读写的 "),s("code",[a._v("map")]),a._v("，新增 "),s("code",[a._v("key")]),a._v(" 的时候会写入 "),s("code",[a._v("dirty map")]),a._v("。")])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("misses")]),a._v(" 是一个 "),s("code",[a._v("int")]),a._v(" 类型的变量，用于记录 "),s("code",[a._v("read map")]),a._v(" 中没有找到 "),s("code",[a._v("key")]),a._v(" 的次数。当 "),s("code",[a._v("misses")]),a._v(" 达到一定的值的时候，会将 "),s("code",[a._v("dirty map")]),a._v(" 中的 "),s("code",[a._v("key")]),a._v(" 同步到 "),s("code",[a._v("read map")]),a._v(" 中。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("readOnly")]),a._v(" 是一个只读的 "),s("code",[a._v("map")]),a._v("，它的 "),s("code",[a._v("m")]),a._v(" 字段是一个 "),s("code",[a._v("map")]),a._v("，用于保存 "),s("code",[a._v("dirty map")]),a._v(" 中的 "),s("code",[a._v("key")]),a._v(" 的一份快照。"),s("code",[a._v("readOnly")]),a._v(" 中的 "),s("code",[a._v("amended")]),a._v(" 字段用于记录 "),s("code",[a._v("dirty map")]),a._v(" 中是否有 "),s("code",[a._v("read map")]),a._v(" 中不存在的 "),s("code",[a._v("key")]),a._v("。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("entry")]),a._v(" 是一个结构体，它有一个 "),s("code",[a._v("p")]),a._v(" 字段，用于保存 "),s("code",[a._v("key")]),a._v(" 对应的值。"),s("code",[a._v("p")]),a._v(" 字段有三种状态："),s("code",[a._v("nil")]),a._v("、"),s("code",[a._v("expunged")]),a._v("、正常状态。"),s("code",[a._v("expunged")]),a._v(" 是一个特殊的标记，用于表示 "),s("code",[a._v("key")]),a._v(" 对应的值已经被删除，并且那个 "),s("code",[a._v("key")]),a._v(" 在 "),s("code",[a._v("dirty map")]),a._v(" 中已经不存在了。")])])]),a._v(" "),s("blockquote",[s("p",[a._v("因为在 "),s("code",[a._v("sync.Map")]),a._v(" 中是使用了特殊的标记来表示删除的，也就是不需要使用 "),s("code",[a._v("delete")]),a._v(" 函数来删除 "),s("code",[a._v("key")]),a._v("。这样就可以利用到了原子操作了，而不需要加锁。这样就能获得更好的性能了。")])]),a._v(" "),s("h3",{attrs:{id:"sync-map-的整体模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sync-map-的整体模型"}},[a._v("#")]),a._v(" sync.Map 的整体模型")]),a._v(" "),s("p",[a._v("上一小节我们已经介绍了 "),s("code",[a._v("sync.Map")]),a._v(" 的数据结构，现在让我们来看一下 "),s("code",[a._v("sync.Map")]),a._v(" 的整体模型。 它的整体模型如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/1.webp",alt:"sync_map_1.png"}})]),a._v(" "),s("p",[a._v("关键说明：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("read map")]),a._v(" 是一个只读的 "),s("code",[a._v("map")]),a._v("，不能往里面添加 "),s("code",[a._v("key")]),a._v("。而 "),s("code",[a._v("dirty map")]),a._v(" 是一个可读写的 "),s("code",[a._v("map")]),a._v("，可以往里面添加 "),s("code",[a._v("key")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("sync.Map")]),a._v(" 实现中，基本都是会先从 "),s("code",[a._v("read map")]),a._v(" 中查找 "),s("code",[a._v("key")]),a._v("，如果没有找到，再从 "),s("code",[a._v("dirty map")]),a._v(" 中查找 "),s("code",[a._v("key")]),a._v("。然后根据查找结果来进行后续的操作。")]),a._v(" "),s("li",[a._v("如果 "),s("code",[a._v("read map")]),a._v(" 中没有找到 "),s("code",[a._v("key")]),a._v("，需要加锁才能从 "),s("code",[a._v("dirty map")]),a._v(" 中查找 "),s("code",[a._v("key")]),a._v("。因为 "),s("code",[a._v("dirty map")]),a._v(" 是一个可读写的 "),s("code",[a._v("map")]),a._v("，所以需要加锁来保证并发安全。")])]),a._v(" "),s("blockquote",[s("p",[a._v("这实际上是一种读写分离的理念。")])]),a._v(" "),s("h3",{attrs:{id:"sync-map-的工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sync-map-的工作流程"}},[a._v("#")]),a._v(" sync.Map 的工作流程")]),a._v(" "),s("p",[a._v("通过看它的数据结构和整体模型，想必我们依然对 "),s("code",[a._v("sync.Map")]),a._v(" 感到很陌生。现在再来看看 "),s("code",[a._v("sync.Map")]),a._v(" 的工作流程，这样我们就能知道其中一些字段或者结构体的实际作用了。")]),a._v(" "),s("p",[a._v("下面，我们通过一些 "),s("code",[a._v("map")]),a._v(" 的常规操作来看一下 "),s("code",[a._v("sync.Map")]),a._v(" 的工作流程：")]),a._v(" "),s("ol",[s("li",[a._v("添加 "),s("code",[a._v("key")]),a._v("：如果是第一次写入 "),s("code",[a._v("key")]),a._v(" 的话（假设其值为 "),s("code",[a._v("value")]),a._v("），会先写入 "),s("code",[a._v("dirty map")]),a._v("，在 "),s("code",[a._v("dirty map")]),a._v(" 中的 "),s("code",[a._v("value")]),a._v(" 是一个指向 "),s("code",[a._v("entry")]),a._v(" 结构体的指针。"),s("code",[a._v("entry")]),a._v(" 结构体中的 "),s("code",[a._v("p")]),a._v(" 字段也是一个指针，它指向了 "),s("code",[a._v("value")]),a._v(" 的内存地址。")]),a._v(" "),s("li",[a._v("读取 "),s("code",[a._v("key")]),a._v("：先从 "),s("code",[a._v("read")]),a._v(" 中读取（无锁，原子操作），"),s("code",[a._v("read")]),a._v(" 中找不到的时候再去 "),s("code",[a._v("dirty")]),a._v(" 中查找（有锁）。")]),a._v(" "),s("li",[a._v("修改 "),s("code",[a._v("key")]),a._v("：如果 "),s("code",[a._v("key")]),a._v(" 在 "),s("code",[a._v("read map")]),a._v(" 中存在的话，会直接修改 "),s("code",[a._v("key")]),a._v(" 对应的 "),s("code",[a._v("value")]),a._v("。如果 "),s("code",[a._v("key")]),a._v(" 在 "),s("code",[a._v("read map")]),a._v(" 中不存在的话，会去 "),s("code",[a._v("dirty map")]),a._v(" 中查找（有锁），如果在 "),s("code",[a._v("dirty map")]),a._v(" 中也不存在的话，则修改失败。")]),a._v(" "),s("li",[a._v("删除 "),s("code",[a._v("key")]),a._v("：如果 "),s("code",[a._v("key")]),a._v(" 在 "),s("code",[a._v("read map")]),a._v(" 中存在的话，会将 "),s("code",[a._v("key")]),a._v(" 对应的 "),s("code",[a._v("entry")]),a._v(" 指针设置为 "),s("code",[a._v("nil")]),a._v("（实际上是打标记而已，并没有删除底层 "),s("code",[a._v("map")]),a._v(" 的 "),s("code",[a._v("key")]),a._v("）。如果在 "),s("code",[a._v("read")]),a._v(" 中找不到，并且 "),s("code",[a._v("dirty")]),a._v(" 有部分 "),s("code",[a._v("read")]),a._v(" 中不存在的 "),s("code",[a._v("key")]),a._v(" 的话，会去 "),s("code",[a._v("dirty map")]),a._v(" 中查找（有锁），如果在 "),s("code",[a._v("dirty map")]),a._v(" 中也不存在的话，则删除失败。")])]),a._v(" "),s("blockquote",[s("p",[a._v("可能我们看完这一大段说明还是不会太懂，但是没关系，下面对每一个操作都有图，结合我画的图应该可以更好地理解。")])]),a._v(" "),s("h2",{attrs:{id:"深入之前需要了解的一些背景知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入之前需要了解的一些背景知识"}},[a._v("#")]),a._v(" 深入之前需要了解的一些背景知识")]),a._v(" "),s("p",[a._v("在 "),s("code",[a._v("sync.Map")]),a._v(" 中有一些我们需要有基本了解的背景知识，这里简单说一下。")]),a._v(" "),s("h3",{attrs:{id:"锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[a._v("#")]),a._v(" 锁")]),a._v(" "),s("p",[a._v("在 "),s("code",[a._v("sync.Map")]),a._v(" 中，需要读写 "),s("code",[a._v("dirty map")]),a._v(" 的时候，都需要加锁，加的锁是 "),s("code",[a._v("sync.Mutex")]),a._v("。对于这把锁，我们需要知道的是： "),s("code",[a._v("sync.Mutex")]),a._v(" 是一个互斥锁。当一个 "),s("code",[a._v("goroutine")]),a._v(" 获得了 "),s("code",[a._v("sync.Mutex")]),a._v(" 的使用权之后（"),s("code",[a._v("Lock")]),a._v(" 调用成功），其他的 "),s("code",[a._v("goroutine")]),a._v(" 就只能等待，直到该 "),s("code",[a._v("goroutine")]),a._v(" 释放了 "),s("code",[a._v("sync.Mutex")]),a._v("（持有锁的 "),s("code",[a._v("goroutine")]),a._v(" 使用了 "),s("code",[a._v("Unlock")]),a._v(" 释放锁）。")]),a._v(" "),s("p",[a._v("所以，我们在源码中看到 "),s("code",[a._v("m.mu.Lock()")]),a._v(" 这行代码的时候，就应该知道，从这一行代码直到 "),s("code",[a._v("m.mu.Unlock()")]),a._v(" 调用之前，其他 "),s("code",[a._v("goroutine")]),a._v(" 调用 "),s("code",[a._v("m.mu.Lock()")]),a._v(" 的时候都会被阻塞。")]),a._v(" "),s("blockquote",[s("p",[a._v("在 "),s("code",[a._v("sync.Map")]),a._v(" 中，"),s("code",[a._v("dirty map")]),a._v(" 的读写都需要加锁，而读 "),s("code",[a._v("read map")]),a._v(" 的时候不需要锁的。")])]),a._v(" "),s("h3",{attrs:{id:"原子操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子操作"}},[a._v("#")]),a._v(" 原子操作")]),a._v(" "),s("p",[a._v("go 语言中的原子操作是指，不会被打断的操作。也就是说，当一个 "),s("code",[a._v("goroutine")]),a._v(" 执行了一个原子操作之后，其他的 "),s("code",[a._v("goroutine")]),a._v(" 就不能打断它，直到它执行完毕。 这可以保证我们的一些操作是完整的，比如给一个整数加上一个增量，如果不使用原子操作，而是先取出来再进行加法运算，再写回去这样操作的话， 就会出现问题，因为这个过程有可能被打断，如果另外一个 "),s("code",[a._v("goroutine")]),a._v(" 也在进行这个操作的话，就有可能会出现数据错乱的问题。")]),a._v(" "),s("p",[a._v("而原子操作的 "),s("code",[a._v("Add")]),a._v("（比如 "),s("code",[a._v("atomic.Int32")]),a._v(" 的 "),s("code",[a._v("Add")]),a._v(" 方法）可以在加法过程中不被打断，所以我们可以保证数据的完整性。 这里说的不被打断说的是："),s("strong",[a._v("这个原子操作完成之前，其他 "),s("code",[a._v("goroutine")]),a._v(" 不能操作这个原子类型")]),a._v("。")]),a._v(" "),s("p",[a._v("除了 "),s("code",[a._v("Add")]),a._v(" 方法，"),s("code",[a._v("atomic")]),a._v(" 包中还有 "),s("code",[a._v("Load")]),a._v("、"),s("code",[a._v("Store")]),a._v("、"),s("code",[a._v("Swap")]),a._v(" 等方法，这些方法都是原子操作，可以保证数据的完整性。")]),a._v(" "),s("blockquote",[s("p",[a._v("在 "),s("code",[a._v("sync.Map")]),a._v(" 中，对 "),s("code",[a._v("entry")]),a._v(" 状态的修改都是通过原子操作实现的。")])]),a._v(" "),s("h3",{attrs:{id:"cas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas"}},[a._v("#")]),a._v(" CAS")]),a._v(" "),s("p",[a._v("CAS 是 "),s("code",[a._v("Compare And Swap")]),a._v(" 的缩写，意思是比较并交换。"),s("code",[a._v("CAS")]),a._v(" 操作是一种原子操作，它的原理是：当且仅当 "),s("code",[a._v("内存值 == 预期值")]),a._v(" 时，才会将 "),s("code",[a._v("内存值")]),a._v(" 修改为 "),s("code",[a._v("新值")]),a._v("。 使用代码表示的话，大概如下：")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("addr "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" old "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("addr "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("new")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[a._v("也就是说：")]),a._v(" "),s("ul",[s("li",[a._v("CAS 原子操作会先进行比较，如果 "),s("code",[a._v("内存值 == 预期值")]),a._v("，则执行交换操作，将 "),s("code",[a._v("内存值")]),a._v(" 修改为 "),s("code",[a._v("新值")]),a._v("，并返回 "),s("code",[a._v("true")]),a._v("。")]),a._v(" "),s("li",[a._v("否则，不执行交换操作，直接返回 "),s("code",[a._v("false")]),a._v("。")])]),a._v(" "),s("blockquote",[s("p",[a._v("CAS 如果比较发现相同就会交换，如果不相同就不交换，这个过程是原子的，不会被打断。在 "),s("code",[a._v("sync.Map")]),a._v(" 中，修改 "),s("code",[a._v("entry")]),a._v(" 的状态的时候，有可能会使用到 CAS。")])]),a._v(" "),s("h3",{attrs:{id:"double-checking-双重检测"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#double-checking-双重检测"}},[a._v("#")]),a._v(" double-checking（双重检测）")]),a._v(" "),s("p",[a._v("这是一种尽量减少锁占用的策略，在单例模式中可能会用到：")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 第一次检查不使用锁")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("defer")]),a._v(" mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取到锁后，还要再次检查，")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 因为有可能在等待锁的时候 instance 已经被初始化了")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" instance\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("p",[a._v("上面这个例子中，在获取到锁之后，还进行了一次检查，这是因为 "),s("code",[a._v("mu.Lock()")]),a._v(" 如果获取不到锁，那么当前 "),s("code",[a._v("goroutine")]),a._v(" 就会被挂起，等待锁被释放。 如果在等待锁的过程中，另外一个 "),s("code",[a._v("goroutine")]),a._v(" 已经初始化了 "),s("code",[a._v("instance")]),a._v("，那么当前 "),s("code",[a._v("goroutine")]),a._v(" 就不需要再初始化了，所以需要再次检查。")]),a._v(" "),s("p",[a._v("如果第二次检查发现 "),s("code",[a._v("instance")]),a._v(" 已经被初始化了，那么就不需要再初始化了，直接返回 "),s("code",[a._v("instance")]),a._v(" 即可。")]),a._v(" "),s("blockquote",[s("p",[a._v("在 "),s("code",[a._v("sync.Map")]),a._v(" 中，也有类似的双重检测，比如在 "),s("code",[a._v("Load")]),a._v(" 方法中，会先从 "),s("code",[a._v("read")]),a._v(" 中获取 "),s("code",[a._v("entry")]),a._v("，如果没有，就会加锁，获取到锁后，再去检查一下 "),s("code",[a._v("read")]),a._v(" 中是否有 "),s("code",[a._v("entry")]),a._v("，如果没有，才会从 "),s("code",[a._v("dirty")]),a._v(" 中获取 "),s("code",[a._v("entry")]),a._v("。这是因为在等待锁的时候可能有其他 "),s("code",[a._v("goroutine")]),a._v(" 已经将 "),s("code",[a._v("key")]),a._v(" 放入 "),s("code",[a._v("read")]),a._v(" 中了（比如做了 "),s("code",[a._v("Range")]),a._v(" 遍历）。")])]),a._v(" "),s("h2",{attrs:{id:"dirty-map-和-read-map-之间的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirty-map-和-read-map-之间的转换"}},[a._v("#")]),a._v(" dirty map 和 read map 之间的转换")]),a._v(" "),s("p",[a._v("上面我们说了，写入新的 "),s("code",[a._v("key")]),a._v(" 的时候，其实是写入到 "),s("code",[a._v("dirty")]),a._v(" 中的，那什么时候会将 "),s("code",[a._v("key")]),a._v(" 写入到 "),s("code",[a._v("read")]),a._v(" 中呢？ 准确来说，"),s("strong",[s("code",[a._v("sync.Map")]),a._v(" 是不会往 "),s("code",[a._v("read map")]),a._v(" 中写入 "),s("code",[a._v("key")]),a._v(" 的，但是可以使用 "),s("code",[a._v("dirty map")]),a._v(" 来覆盖 "),s("code",[a._v("read map")])]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"dirty-map-转换为-read-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirty-map-转换为-read-map"}},[a._v("#")]),a._v(" dirty map 转换为 read map")]),a._v(" "),s("p",[s("code",[a._v("dirty")]),a._v(" map 转换为 "),s("code",[a._v("read")]),a._v(" map 的时机是：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("missess")]),a._v(" 的次数达到了 "),s("code",[a._v("len(dirty)")]),a._v(" 的时候。这意味着，很多次在 "),s("code",[a._v("read map")]),a._v(" 中都找不到 "),s("code",[a._v("key")]),a._v("，这种情况下是需要加锁才能再从 "),s("code",[a._v("dirty map")]),a._v(" 中查找的。这种情况下，就会将 "),s("code",[a._v("dirty map")]),a._v(" 转换为 "),s("code",[a._v("read map")]),a._v("，这样后续在 "),s("code",[a._v("read map")]),a._v(" 中能找到 "),s("code",[a._v("key")]),a._v(" 的话就不需要加锁了。")]),a._v(" "),s("li",[a._v("使用 "),s("code",[a._v("Range")]),a._v(" 遍历的时候，如果发现 "),s("code",[a._v("dirty map")]),a._v(" 中有些 "),s("code",[a._v("key")]),a._v(" 在 "),s("code",[a._v("read map")]),a._v(" 中没有，那么就会将 "),s("code",[a._v("dirty map")]),a._v(" 转换为 "),s("code",[a._v("read map")]),a._v("。然后遍历的时候就遍历一下 "),s("code",[a._v("read map")]),a._v(" 就可以了。（如果 "),s("code",[a._v("read map")]),a._v(" 中的 "),s("code",[a._v("key")]),a._v(" 和 "),s("code",[a._v("dirty map")]),a._v(" 中的 "),s("code",[a._v("key")]),a._v(" 完全一致，那直接遍历 "),s("code",[a._v("read map")]),a._v(" 就足够了。）")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/2.webp",alt:"sync_map_2.png"}})]),a._v(" "),s("p",[s("code",[a._v("dirty map")]),a._v(" 转换为 "),s("code",[a._v("read map")]),a._v(" 的操作其实是很简单的，就是使用 "),s("code",[a._v("dirty map")]),a._v(" 直接覆盖掉 "),s("code",[a._v("read map")]),a._v("，然后将 "),s("code",[a._v("dirty map")]),a._v(" 置为 "),s("code",[a._v("nil")]),a._v("，同时 "),s("code",[a._v("misses")]),a._v(" 重置为 "),s("code",[a._v("0")]),a._v("。")]),a._v(" "),s("blockquote",[s("p",[a._v("简单来说，如果因为新增了 "),s("code",[a._v("key")]),a._v(" 需要频繁加锁的时候，就会将 "),s("code",[a._v("dirty map")]),a._v(" 转换为 "),s("code",[a._v("read map")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"read-map-转换为-dirty-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#read-map-转换为-dirty-map"}},[a._v("#")]),a._v(" read map 转换为 dirty map")]),a._v(" "),s("p",[s("code",[a._v("read map")]),a._v(" 转换为 "),s("code",[a._v("dirty map")]),a._v(" 的时机是：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("dirty map")]),a._v(" 为 "),s("code",[a._v("nil")]),a._v(" 的情况下，需要往 "),s("code",[a._v("dirty map")]),a._v(" 中增加新的 "),s("code",[a._v("key")]),a._v("。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/3.webp",alt:"sync_map_3.png"}})]),a._v(" "),s("p",[s("code",[a._v("read map")]),a._v(" 转换为 "),s("code",[a._v("dirty map")]),a._v(" 的时候，会将 "),s("code",[a._v("read map")]),a._v(" 中正常的 "),s("code",[a._v("key")]),a._v(" 复制到 "),s("code",[a._v("dirty map")]),a._v(" 中。 但是这个操作完了之后，"),s("code",[a._v("read map")]),a._v(" 中的那些被删除的 "),s("code",[a._v("key")]),a._v(" 占用的空间是还没有被释放的。 那什么时候释放呢？那就是上面说的 "),s("code",[a._v("dirty map")]),a._v(" 转换为 "),s("code",[a._v("read map")]),a._v(" 的时候。")]),a._v(" "),s("h2",{attrs:{id:"sync-map-中-entry-的状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sync-map-中-entry-的状态"}},[a._v("#")]),a._v(" sync.Map 中 entry 的状态")]),a._v(" "),s("p",[a._v("在 "),s("code",[a._v("sync.Map")]),a._v(" 中，"),s("code",[a._v("read map")]),a._v(" 和 "),s("code",[a._v("dirty map")]),a._v(" 中相同 "),s("code",[a._v("key")]),a._v(" 的 "),s("code",[a._v("entry")]),a._v(" 都指向了相同的内容（共享的）。 这样一来，我们就不需要维护两份相同的 "),s("code",[a._v("value")]),a._v(" 了，这一方面减少了内存使用的同时，也可以保证同一个 "),s("code",[a._v("key")]),a._v(" 的数据在 "),s("code",[a._v("read")]),a._v(" 和 "),s("code",[a._v("dirty")]),a._v(" 中看到都是一致的。 因为我们可以通过原子操作来保证对 "),s("code",[a._v("entry")]),a._v(" 的修改是安全的（但是增加 "),s("code",[a._v("key")]),a._v(" 依然是需要加锁的）。")]),a._v(" "),s("p",[s("code",[a._v("entry")]),a._v(" 的状态有三种：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("nil")]),a._v("：被删除了，"),s("code",[a._v("read map")]),a._v(" 和 "),s("code",[a._v("dirty map")]),a._v(" 都有这个 "),s("code",[a._v("key")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("expunged")]),a._v("：被删除了，但是 "),s("code",[a._v("dirty map")]),a._v(" 中没有这个 "),s("code",[a._v("key")]),a._v("。")]),a._v(" "),s("li",[a._v("正常状态：可以被正常读取。")])]),a._v(" "),s("p",[a._v("它们的转换关系如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/4.webp",alt:"sync_map_4.png"}})]),a._v(" "),s("p",[a._v("说明：")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("key")]),a._v(" 被删除")]),a._v(" "),s("li",[s("code",[a._v("dirty map")]),a._v(" 为 "),s("code",[a._v("nil")]),a._v(" 的时候，需要写入新的 "),s("code",[a._v("key")]),a._v("，"),s("code",[a._v("read")]),a._v(" 中被删除的 "),s("code",[a._v("key")]),a._v(" 状态会由 "),s("code",[a._v("nil")]),a._v(" 修改为 "),s("code",[a._v("expunged")])]),a._v(" "),s("li",[a._v("被删除的 "),s("code",[a._v("key")]),a._v("，重新写入")]),a._v(" "),s("li",[s("code",[a._v("read")]),a._v(" 中被删除的 "),s("code",[a._v("key")]),a._v("（"),s("code",[a._v("dirty map")]),a._v(" 中不存在的），在再次写入的时候会发生")])]),a._v(" "),s("p",[a._v("注意："),s("code",[a._v("expunged")]),a._v(" 和正常状态之间不能直接转换，"),s("code",[a._v("expunged")]),a._v(" 的 "),s("code",[a._v("key")]),a._v(" 需要写入的话，需要先修改其状态为 "),s("code",[a._v("nil")]),a._v("。正常状态被删除之后先转换为 "),s("code",[a._v("nil")]),a._v("，然后在创建新的 "),s("code",[a._v("map")]),a._v(" 的时候才会转换为正常状态。也就是 "),s("code",[a._v("1->2")]),a._v(" 和 "),s("code",[a._v("4->3")]),a._v(" 这两种转换)")]),a._v(" "),s("blockquote",[s("p",[a._v("不存在由正常状态转换为 "),s("code",[a._v("expunged")]),a._v(" 或者由 "),s("code",[a._v("expunged")]),a._v(" 转换为正常状态的情况。")])]),a._v(" "),s("h3",{attrs:{id:"entry-状态存在的意义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entry-状态存在的意义"}},[a._v("#")]),a._v(" entry 状态存在的意义")]),a._v(" "),s("p",[s("code",[a._v("entry")]),a._v(" 的状态存在的意义是什么呢？我们去翻阅源码的时候会发现，其实 "),s("code",[a._v("sync.Map")]),a._v(" 在删除的时候， 如果在 "),s("code",[a._v("read map")]),a._v(" 中找到了 "),s("code",[a._v("key")]),a._v("，那么删除操作只是将 "),s("code",[a._v("entry")]),a._v(" 的状态修改为 "),s("code",[a._v("nil")]),a._v("（通过原子操作修改），并没有真正的删除 "),s("code",[a._v("key")]),a._v("。")]),a._v(" "),s("p",[a._v("也就是并不像我们使用普通 "),s("code",[a._v("map")]),a._v(" 的时候那种 "),s("code",[a._v("delete")]),a._v(" 操作，会将 "),s("code",[a._v("key")]),a._v(" 从 "),s("code",[a._v("map")]),a._v(" 中删除。 这样带来的一个好处就是，删除操作我们也不需要加锁了，因为我们只是修改了 "),s("code",[a._v("entry")]),a._v(" 的状态，而不是真正的删除 "),s("code",[a._v("key")]),a._v("。 这样就可以获得更好的性能了。")]),a._v(" "),s("blockquote",[s("p",[a._v("就算转换为了 "),s("code",[a._v("nil")]),a._v(" 状态，也依然可以转换为 "),s("code",[a._v("expunged")]),a._v(" 或者正常状态，具体看上一个图。")])]),a._v(" "),s("h2",{attrs:{id:"read-amended-的含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#read-amended-的含义"}},[a._v("#")]),a._v(" read.amended 的含义")]),a._v(" "),s("p",[a._v("我们往 "),s("code",[a._v("sync.Map")]),a._v(" 中写入新的 "),s("code",[a._v("key")]),a._v(" 的时候，会先写入 "),s("code",[a._v("dirty map")]),a._v("，但是不会写入 "),s("code",[a._v("read map")]),a._v("。 这样一来，我们在读取的时候就需要注意了，因为我们要查找的 "),s("code",[a._v("key")]),a._v(" 是有可能只存在于 "),s("code",[a._v("dirty map")]),a._v(" 中的， 那么我们是不是每次在 "),s("code",[a._v("read map")]),a._v(" 中找不到的时候都需要先去 "),s("code",[a._v("dirty map")]),a._v(" 中查找呢？")]),a._v(" "),s("p",[a._v("答案是否定的。我们从 "),s("code",[a._v("dirty map")]),a._v(" 中进行查找是有代价的，因为要加锁。"),s("strong",[a._v("如果不加锁，遇到其他 "),s("code",[a._v("goroutine")]),a._v(" 写入 "),s("code",[a._v("dirty map")]),a._v(" 的时候就报错了。")]),a._v(" 针对这种情况，一种比较简单的解决方法是，增加一个标志，记录一下 "),s("code",[a._v("read map")]),a._v(" 跟 "),s("code",[a._v("dirty map")]),a._v(" 中的 "),s("code",[a._v("key")]),a._v(" 是否是完全一致的。 如果是一致的，那么我们就不需要再加锁，然后去 "),s("code",[a._v("dirty map")]),a._v(" 中查找了。否则，我们就需要加锁，然后去 "),s("code",[a._v("dirty map")]),a._v(" 中查找。")]),a._v(" "),s("p",[s("code",[a._v("sync.Map")]),a._v(" 中的 "),s("code",[a._v("amended")]),a._v(" 字段就是这里说的标志字段。单单说文字可能有点抽象，我们可以结合下图理解一下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/5.webp",alt:"sync_map_5.png"}})]),a._v(" "),s("blockquote",[s("p",[a._v("read.amended 的含义就是 "),s("code",[a._v("read map")]),a._v(" 跟 "),s("code",[a._v("dirty map")]),a._v(" 中的 "),s("code",[a._v("key")]),a._v(" 是否是完全一致的。如果为 "),s("code",[a._v("true")]),a._v("，说明有些 key 只存在于 "),s("code",[a._v("dirty map")]),a._v(" 中。")])]),a._v(" "),s("h2",{attrs:{id:"sync-map-源码剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sync-map-源码剖析"}},[a._v("#")]),a._v(" sync.Map 源码剖析")]),a._v(" "),s("p",[s("code",[a._v("sync.Map")]),a._v(" 提供的方法并不多，它能做的操作跟普通的 "),s("code",[a._v("map")]),a._v(" 差不多，只是在并发的情况下，它能保证线程安全。 下面是 "),s("code",[a._v("sync.Map")]),a._v(" 所能提供的方法：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("Store")]),a._v("/"),s("code",[a._v("Swap")]),a._v("（增/改）: 往 "),s("code",[a._v("sync.Map")]),a._v(" 中写入新的 "),s("code",[a._v("key")]),a._v("。("),s("code",[a._v("Store")]),a._v(" 实际调用了 "),s("code",[a._v("Swap")]),a._v(" 方法)")]),a._v(" "),s("li",[s("code",[a._v("Load")]),a._v("（查）: 从 "),s("code",[a._v("sync.Map")]),a._v(" 中读取 "),s("code",[a._v("key")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("LoadOrStore")]),a._v("（查/增/改）: 从 "),s("code",[a._v("sync.Map")]),a._v(" 中读取 "),s("code",[a._v("key")]),a._v("，如果不存在，就写入新的 "),s("code",[a._v("key")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("Delete")]),a._v("/"),s("code",[a._v("LoadAndDelete")]),a._v("（删）: 从 "),s("code",[a._v("sync.Map")]),a._v(" 中删除 "),s("code",[a._v("key")]),a._v("。("),s("code",[a._v("Delete")]),a._v(" 实际调用了 "),s("code",[a._v("LoadAndDelete")]),a._v(" 方法)")]),a._v(" "),s("li",[s("code",[a._v("Range")]),a._v(": 遍历 "),s("code",[a._v("sync.Map")]),a._v(" 中的所有 "),s("code",[a._v("key")]),a._v("。")])]),a._v(" "),s("p",[a._v("还有两个可能比较少用到的方法：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("CompareAndDelete")]),a._v(": 从 "),s("code",[a._v("sync.Map")]),a._v(" 中删除 "),s("code",[a._v("key")]),a._v("，但是只有在 "),s("code",[a._v("key")]),a._v(" 的值跟 "),s("code",[a._v("old")]),a._v(" 相等的时候才会删除。")]),a._v(" "),s("li",[s("code",[a._v("CompareAndSwap")]),a._v(": 从 "),s("code",[a._v("sync.Map")]),a._v(" 中写入新的 "),s("code",[a._v("key")]),a._v("，但是只有在 "),s("code",[a._v("key")]),a._v(" 的值跟 "),s("code",[a._v("old")]),a._v(" 相等的时候才会写入。")])]),a._v(" "),s("p",[a._v("接下来我们会从源码的角度来分析一下 "),s("code",[a._v("sync.Map")]),a._v(" 的实现。")]),a._v(" "),s("h3",{attrs:{id:"store-swap-源码剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#store-swap-源码剖析"}},[a._v("#")]),a._v(" Store/Swap 源码剖析")]),a._v(" "),s("p",[s("code",[a._v("Store")]),a._v(" 实际上是对 "),s("code",[a._v("Swap")]),a._v(" 方法的调用，所以我们看 "),s("code",[a._v("Swap")]),a._v(" 方法的源码就够了：")]),a._v(" "),s("p",[s("code",[a._v("Swap")]),a._v(" 方法的作用是：交换一个 "),s("code",[a._v("key")]),a._v(" 的值，并返回之前的值（如果有的话）。 返回值中的 "),s("code",[a._v("prev")]),a._v(" 就是之前的值，"),s("code",[a._v("loaded")]),a._v(" 表示 "),s("code",[a._v("key")]),a._v(" 是否存在。")]),a._v(" "),s("p",[a._v("下面是 "),s("code",[a._v("Swap")]),a._v(" 方法的源码：")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Swap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" value any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("previous any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" loaded "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 读取 read map")]),a._v("\n   read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 先从 read map 中读取 key")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 在 read map 中读取到了 key")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("trySwap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ok 表示是否成功交换")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// swap 成功")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 之前的值为 nil，表示 key 之前已经被删除的了")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 之前的值不为 nil，表示存在")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 执行到这里表示：")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// read map 中存在 key，但是已经被删除。（为 expunged 状态）")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// read map 中找不到 key，加锁，从 dirty map 中继续找")]),a._v("\n   m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// double checking，二次检查，因为有可能等待锁的时候 read map 已经发生了变化")]),a._v("\n   read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// read map 中存在 key")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("unexpungeLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 将 entry 由 expunged 状态改为 nil 状态")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// key 之前已经被删除了，并且之前 dirty map 中不存在 key，")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 所以这里需要将 key 添加到 dirty map 中。")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" e\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 写入新的值，v 是旧的值")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("swapLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// v 不为 nil，表示之前存在")]),a._v("\n         loaded "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n         previous "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("v\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// read map 中不存在 key，但是 dirty map 中存在 key ")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 写入新的值，v 是旧的值")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("swapLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// v 不为 nil，表示之前存在")]),a._v("\n         loaded "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n         previous "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("v\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// read map 中不存在 key，dirty map 中也不存在 key（需要写入新的 key）")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amended "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// dirty map 和 read map 的 key 完全一致）")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 现在要写入新的 key 了，所以这个 amended 状态得修改了。")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 我们正在将第一个新键添加到 dirty map 中。")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 确保它已分配并将 read map 的 amended 标记设置为 true。")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("dirtyLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// amended 设置为 true，因为下面要写入一个在 read map 中不存在的 key")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Store")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("readOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" amended"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 新增的 key，dirty map 中不存在，所以直接写入")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("newEntry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 解锁")]),a._v("\n   m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" previous"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" loaded\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br"),s("span",{staticClass:"line-number"},[a._v("48")]),s("br"),s("span",{staticClass:"line-number"},[a._v("49")]),s("br"),s("span",{staticClass:"line-number"},[a._v("50")]),s("br"),s("span",{staticClass:"line-number"},[a._v("51")]),s("br"),s("span",{staticClass:"line-number"},[a._v("52")]),s("br"),s("span",{staticClass:"line-number"},[a._v("53")]),s("br"),s("span",{staticClass:"line-number"},[a._v("54")]),s("br"),s("span",{staticClass:"line-number"},[a._v("55")]),s("br"),s("span",{staticClass:"line-number"},[a._v("56")]),s("br"),s("span",{staticClass:"line-number"},[a._v("57")]),s("br")])]),s("h4",{attrs:{id:"swap-store-图示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#swap-store-图示"}},[a._v("#")]),a._v(" Swap/Store 图示")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/6.webp",alt:"sync_map_6.png"}})]),a._v(" "),s("blockquote",[s("p",[a._v("注意：这里的 "),s("code",[a._v("read map")]),a._v(" 和 "),s("code",[a._v("dirty map")]),a._v(" 中都没有包含 "),s("code",[a._v("entry")]),a._v("，我们知道它们中相同的 "),s("code",[a._v("key")]),a._v(" 都指向相同的 "),s("code",[a._v("entry")]),a._v(" 就可以了。")])]),a._v(" "),s("h4",{attrs:{id:"swap-的操作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#swap-的操作流程"}},[a._v("#")]),a._v(" Swap 的操作流程")]),a._v(" "),s("ol",[s("li",[a._v("从 "),s("code",[a._v("read map")]),a._v(" 中读取 "),s("code",[a._v("key")]),a._v("，如果存在，就直接交换 "),s("code",[a._v("value")]),a._v("，并返回之前的 "),s("code",[a._v("value")]),a._v("。")]),a._v(" "),s("li",[a._v("如果 "),s("code",[a._v("read map")]),a._v(" 中不存在 "),s("code",[a._v("key")]),a._v("，就加锁，加锁后，再从 "),s("code",[a._v("read map")]),a._v(" 中读取 "),s("code",[a._v("key")]),a._v("，如果存在，就直接交换 "),s("code",[a._v("value")]),a._v("，并返回之前的 "),s("code",[a._v("value")]),a._v("。（"),s("code",[a._v("double checking")]),a._v("）")]),a._v(" "),s("li",[a._v("加锁后，如果在 "),s("code",[a._v("read map")]),a._v(" 中依然找不到 "),s("code",[a._v("key")]),a._v("，再从 "),s("code",[a._v("dirty map")]),a._v(" 中读取 "),s("code",[a._v("key")]),a._v("，如果存在，就直接交换 "),s("code",[a._v("value")]),a._v("，并返回之前的 "),s("code",[a._v("value")]),a._v("。")]),a._v(" "),s("li",[a._v("如果 "),s("code",[a._v("read map")]),a._v(" 和 "),s("code",[a._v("dirty map")]),a._v(" 都不存在 "),s("code",[a._v("key")]),a._v("，就将 "),s("code",[a._v("key")]),a._v(" 添加到 "),s("code",[a._v("dirty map")]),a._v(" 中，并返回 "),s("code",[a._v("nil")]),a._v("。在这一步中，如果 "),s("code",[a._v("read map")]),a._v(" 和 "),s("code",[a._v("dirty map")]),a._v(" 的 "),s("code",[a._v("key")]),a._v(" 完全一致，就将 "),s("code",[a._v("read map")]),a._v(" 的 "),s("code",[a._v("amended")]),a._v(" 状态设置为 "),s("code",[a._v("true")]),a._v("。")])]),a._v(" "),s("blockquote",[s("p",[a._v("在第 4 步中，还有一个关键操作就是 "),s("code",[a._v("dirtyLocked()")]),a._v("，这个操作的作用是保证 "),s("code",[a._v("dirty map")]),a._v(" 初始化，如果 "),s("code",[a._v("dirty map")]),a._v(" 已经初始化，就不会做任何操作。 如果 "),s("code",[a._v("dirty map")]),a._v(" 是 "),s("code",[a._v("nil")]),a._v("，那么会初始化，然后将 "),s("code",[a._v("read map")]),a._v(" 中未被删除的 "),s("code",[a._v("key")]),a._v(" 添加到 "),s("code",[a._v("dirty map")]),a._v(" 中。")])]),a._v(" "),s("h4",{attrs:{id:"dirtylocked-源码剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirtylocked-源码剖析"}},[a._v("#")]),a._v(" dirtyLocked() 源码剖析")]),a._v(" "),s("p",[s("code",[a._v("dirtyLocked()")]),a._v(" 的作用是保证 "),s("code",[a._v("dirty map")]),a._v(" 初始化，如果 "),s("code",[a._v("dirty map")]),a._v(" 已经初始化，就不会做任何操作。")]),a._v(" "),s("p",[a._v("之所以 "),s("code",[a._v("dirty map")]),a._v(" 需要初始化，是因为在 "),s("code",[a._v("dirty map")]),a._v(" 转换为 "),s("code",[a._v("read map")]),a._v(" 的时候，"),s("code",[a._v("dirty map")]),a._v(" 会被设置为 "),s("code",[a._v("nil")]),a._v("， 但是新增 "),s("code",[a._v("key")]),a._v(" 的时候是要写入到 "),s("code",[a._v("dirty map")]),a._v(" 的，所以需要重新初始化。 具体可以看上面的 "),s("code",[a._v("dirty map 和 read map 的之间的转换")]),a._v(" 这一节。")]),a._v(" "),s("p",[s("code",[a._v("dirtyLocked()")]),a._v(" 的实现如下：")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 1. 如果 m.dirty 为 nil，则创建一个新的 dirty map。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 2. 否则，不做任何操作")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("dirtyLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n   read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// dirty map 初始化")]),a._v("\n   m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 对于 read map 中的 key，如果不是 expunged，则将其复制到 dirty map 中。")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// read map 中 nil 的 key 会被转换为 expunged 状态。")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("range")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 不是 expunged 的 entry，才会被复制到 dirty map 中。")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tryExpungeLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" e\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br")])]),s("p",[s("code",[a._v("dirtyLocked()")]),a._v(" 图示：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/7.webp",alt:"sync_map_7.png"}})]),a._v(" "),s("blockquote",[s("p",[s("code",[a._v("dirtyLocked()")]),a._v(" 里有个需要注意的地方就是，它会将 "),s("code",[a._v("read map")]),a._v(" 中的 "),s("code",[a._v("nil")]),a._v(" 的 "),s("code",[a._v("key")]),a._v(" 转换为 "),s("code",[a._v("expunged")]),a._v(" 状态。 "),s("code",[a._v("expunged")]),a._v(" 状态表明这个 "),s("code",[a._v("key")]),a._v(" 只是在 "),s("code",[a._v("read map")]),a._v(" 中，而不在 "),s("code",[a._v("dirty map")]),a._v(" 中。 做完迁移之后，"),s("code",[a._v("dirty map")]),a._v(" 其实就不包含那些被删除的 "),s("code",[a._v("key")]),a._v(" 了。")])]),a._v(" "),s("h4",{attrs:{id:"swap-store-关键说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#swap-store-关键说明"}},[a._v("#")]),a._v(" Swap/Store 关键说明")]),a._v(" "),s("p",[s("code",[a._v("Swap")]),a._v(" 方法里面其实基本已经包含了 "),s("code",[a._v("sync.Map")]),a._v(" 主要设计理念了，下文讲解其他方法的时候，其中一些细节不再做过多的解释了：")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("sync.Map")]),a._v(" 在做很多操作的时候，都会先从 "),s("code",[a._v("read map")]),a._v(" 中读取，如果 "),s("code",[a._v("read map")]),a._v(" 中不存在，再从 "),s("code",[a._v("dirty map")]),a._v(" 中读取。")]),a._v(" "),s("li",[a._v("如果需要从 "),s("code",[a._v("dirty map")]),a._v(" 中读取，那么会先加锁，然后再从 "),s("code",[a._v("dirty map")]),a._v(" 中读取。")]),a._v(" "),s("li",[s("code",[a._v("sync.Map")]),a._v(" 在对 "),s("code",[a._v("entry")]),a._v(" 进行操作的时候，都是通过原子操作进行的。（"),s("strong",[a._v("这是因为有些写操作是没有 "),s("code",[a._v("mu.Lock()")]),a._v(" 保护的")]),a._v("）")])]),a._v(" "),s("blockquote",[s("p",[a._v("而对于 "),s("code",[a._v("dirty map")]),a._v(" 和 "),s("code",[a._v("read map")]),a._v(" 的转换等只是一些实现细节的上的问题，我们如果了解了它的设计理念，那么就可以很容易的理解它的实现了。")])]),a._v(" "),s("h4",{attrs:{id:"swap-store-里的原子操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#swap-store-里的原子操作"}},[a._v("#")]),a._v(" Swap/Store 里的原子操作")]),a._v(" "),s("p",[a._v("这里面用了很多原子操作：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("m.loadReadOnly()")]),a._v(": 读取 "),s("code",[a._v("read map")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("e.trySwap(&value)")]),a._v(": 交换 "),s("code",[a._v("key")]),a._v(" 的值。"),s("code",[a._v("key")]),a._v(" 存在的时候，直接通过原子操作使用新的值覆盖旧的。（如果 "),s("code",[a._v("key")]),a._v(" 只存在于 "),s("code",[a._v("read map")]),a._v(" 中的话，这个操作会失败。）")]),a._v(" "),s("li",[s("code",[a._v("e.unexpungeLocked()")]),a._v(": 将 "),s("code",[a._v("entry")]),a._v(" 由 "),s("code",[a._v("expunged")]),a._v(" 状态改为 "),s("code",[a._v("nil")]),a._v(" 状态。")]),a._v(" "),s("li",[s("code",[a._v("e.swapLocked(&value)")]),a._v(": 交换 "),s("code",[a._v("key")]),a._v(" 的值。"),s("code",[a._v("key")]),a._v(" 存在的时候，直接通过原子操作使用新的值覆盖旧的。")]),a._v(" "),s("li",[s("code",[a._v("m.read.Store(&readOnly{m: read.m, amended: true})")]),a._v(": 将 "),s("code",[a._v("read map")]),a._v(" 的 "),s("code",[a._v("amended")]),a._v(" 状态设置为 "),s("code",[a._v("true")]),a._v("。")])]),a._v(" "),s("h4",{attrs:{id:"为什么使用原子操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用原子操作"}},[a._v("#")]),a._v(" 为什么使用原子操作")]),a._v(" "),s("p",[a._v("为什么要使用原子操作呢？这是因为 "),s("code",[a._v("sync.Map")]),a._v(" 中有一些写操作是没有加锁的，比如删除的时候， 删除的时候只是将 "),s("code",[a._v("entry")]),a._v(" 的状态通过原子操作改成了 "),s("code",[a._v("nil")]),a._v(" 状态。 如果不使用原子操作，那么就会出现并发问题。")]),a._v(" "),s("p",[a._v("比如：在 "),s("code",[a._v("m.mu.Lock()")]),a._v(" 保护的临界区内先读取了 "),s("code",[a._v("entry")]),a._v(" 的状态，我们还没来得及对其做任何操作， 在另外一个 "),s("code",[a._v("goroutine")]),a._v(" 中 "),s("code",[a._v("entry")]),a._v(" 的状态被修改了，那么我们临界区内的 "),s("code",[a._v("entry")]),a._v(" 状态已经成为它的历史状态了， 如果这个时候再基于这个状态做任何操作都会导致并发问题。")]),a._v(" "),s("h3",{attrs:{id:"load-源码剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#load-源码剖析"}},[a._v("#")]),a._v(" Load 源码剖析")]),a._v(" "),s("p",[s("code",[a._v("Load")]),a._v(" 方法的作用是从 "),s("code",[a._v("sync.Map")]),a._v(" 中读取 "),s("code",[a._v("key")]),a._v(" 对应的值。 在 "),s("code",[a._v("sync.Map")]),a._v(" 的实现中，"),s("code",[a._v("key")]),a._v(" 的查找都遵循以下的查找流程：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/8.webp",alt:"sync_map_8.png"}})]),a._v(" "),s("blockquote",[s("p",[a._v("注意：从 "),s("code",[a._v("read map")]),a._v(" 查找不需要加锁，从 "),s("code",[a._v("dirty map")]),a._v(" 中查找需要加锁。")])]),a._v(" "),s("p",[a._v("下面是 "),s("code",[a._v("Load")]),a._v(" 方法的源码：")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Load 返回存储在 map 中的键值，如果不存在值则返回 nil。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ok 结果表明是否在 map 中找到了值。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 通过原子操作获取只读 map")]),a._v("\n   read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 不在只读 map 中，并且 dirty map 包含一些 key 不在 read.m 中。")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amended "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// double checking")]),a._v("\n      read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amended "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 仍然不在只读 map 中，并且 dirty map 包含一些 key 不在 read.m 中。")]),a._v("\n         e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 从 dirty map 中获取")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 不管条目是否存在，记录一个未命中：这个键将走慢路径，直到脏映射被提升为读映射。")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("missLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// read 中读不到")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// key 不存在")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// key 存在，通过原子操作获取值")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br")])]),s("h4",{attrs:{id:"load-图示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#load-图示"}},[a._v("#")]),a._v(" Load 图示")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/9.webp",alt:"sync_map_9.png"}})]),a._v(" "),s("p",[a._v("其实 "),s("code",[a._v("Load")]),a._v(" 的过程大概就是前一个图的查找 "),s("code",[a._v("key")]),a._v(" 的过程，只不过其中有一步 "),s("code",[a._v("missLocked()")]),a._v("， 这个操作是用来记录 "),s("code",[a._v("key")]),a._v(" 未命中的次数的。在达到一定次数之后，会将 "),s("code",[a._v("dirty map")]),a._v(" 提升为 "),s("code",[a._v("read map")]),a._v("。")]),a._v(" "),s("h4",{attrs:{id:"misslocked-源码剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#misslocked-源码剖析"}},[a._v("#")]),a._v(" missLocked 源码剖析")]),a._v(" "),s("p",[s("code",[a._v("missLocked")]),a._v(" 的实现是很简单的，就是将 "),s("code",[a._v("misses")]),a._v(" 加 1，如果 "),s("code",[a._v("misses")]),a._v(" 达到了 "),s("code",[a._v("dirty map")]),a._v(" 的大小， 就会将 "),s("code",[a._v("dirty map")]),a._v(" 提升为 "),s("code",[a._v("read map")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("missLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("misses"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("misses "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 未命中的次数达到 len(m.dirty)，将 dirty map 提升为 read map")]),a._v("\n   m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Store")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("readOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 重置 dirty map")]),a._v("\n   m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 重置 misses")]),a._v("\n   m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("misses "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("p",[a._v("这个过程可以用下图表示：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/10.webp",alt:"sync_map_10.png"}})]),a._v(" "),s("h4",{attrs:{id:"load-工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#load-工作流程"}},[a._v("#")]),a._v(" Load 工作流程")]),a._v(" "),s("p",[s("code",[a._v("Load")]),a._v(" 方法的工作流程如下：")]),a._v(" "),s("ol",[s("li",[a._v("通过原子操作获取 "),s("code",[a._v("read map")]),a._v("。如果 "),s("code",[a._v("read map")]),a._v(" 中存在 "),s("code",[a._v("key")]),a._v("，则直接返回 "),s("code",[a._v("key")]),a._v(" 对应的值。")]),a._v(" "),s("li",[a._v("如果 "),s("code",[a._v("dirty map")]),a._v(" 中包含了一些 "),s("code",[a._v("read map")]),a._v(" 中不存在的 "),s("code",[a._v("key")]),a._v("，则需要加锁，再次获取 "),s("code",[a._v("read map")]),a._v("。")]),a._v(" "),s("li",[a._v("如果 "),s("code",[a._v("read map")]),a._v(" 中不存在 "),s("code",[a._v("key")]),a._v("，则从 "),s("code",[a._v("dirty map")]),a._v(" 中获取 "),s("code",[a._v("key")]),a._v(" 对应的值（同时调用 "),s("code",[a._v("missLocked()")]),a._v("）。否则返回从 "),s("code",[a._v("read map")]),a._v(" 中获取到的 "),s("code",[a._v("key")]),a._v(" 对应的值。")])]),a._v(" "),s("h3",{attrs:{id:"loadorstore-源码剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loadorstore-源码剖析"}},[a._v("#")]),a._v(" LoadOrStore 源码剖析")]),a._v(" "),s("p",[s("code",[a._v("LoadOrStore")]),a._v(" 方法的作用是从 "),s("code",[a._v("sync.Map")]),a._v(" 中读取 "),s("code",[a._v("key")]),a._v(" 对应的值，如果不存在则将 "),s("code",[a._v("key")]),a._v(" 和 "),s("code",[a._v("value")]),a._v(" 存入 "),s("code",[a._v("sync.Map")]),a._v(" 中。 其实它跟 "),s("code",[a._v("Load")]),a._v(" 方法整体流程上也是差不多的，只不过它在找到 "),s("code",[a._v("key")]),a._v(" 的时候，会将 "),s("code",[a._v("key")]),a._v(" 和 "),s("code",[a._v("value")]),a._v(" 存入 "),s("code",[a._v("sync.Map")]),a._v(" 中。 如果没有找到 "),s("code",[a._v("key")]),a._v("，则新增 "),s("code",[a._v("key")]),a._v(" 到 "),s("code",[a._v("dirty map")]),a._v(" 中。")]),a._v(" "),s("p",[a._v("下面是 "),s("code",[a._v("LoadOrStore")]),a._v(" 方法的源码：")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// LoadOrStore 返回键的现有值（如果存在）。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 否则，它存储并返回给定的值。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 返回值：loaded 表明是否是加载的值，而不是存储的值。actual 是当前存储的值。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("LoadOrStore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" value any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("actual any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" loaded "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果从 read map 中获取到了 key，则不需要加锁。")]),a._v("\n   read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// key 是 expunged 状态的时候，ok 为 false")]),a._v("\n      actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" loaded"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tryLoadOrStore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Load 或者 Store 成功")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" loaded\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 加锁")]),a._v("\n   m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// double checking")]),a._v("\n   read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// key 存在于 read map 中")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("unexpungeLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 状态：expunged => nil")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 之前是 expunged 状态，现在变成了 nil 状态。需要在 dirty map 中写入 e。")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" e\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 再次对 entry 执行尝试 Load 或者 Store 新的值的操作")]),a._v("\n      actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" loaded"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("_")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tryLoadOrStore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// key 存在于 dirty map 中")]),a._v("\n      actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" loaded"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("_")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tryLoadOrStore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("missLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// misses++，表示 read map 中没有该 key")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// key 不存在于 read map 和 dirty map 中。")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amended "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 下面需要往 dirty map 中写入新的 key，所以需要确保 dirty map 被初始化。")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("dirtyLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// dirty map 中现在有一些 read map 中不存在的 key，所以需要将 read map 的 amended 置为 true。")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Store")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("readOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" amended"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 写入 dirty map")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("newEntry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" loaded "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" loaded\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br")])]),s("h4",{attrs:{id:"loadorstore-图示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loadorstore-图示"}},[a._v("#")]),a._v(" LoadOrStore 图示")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/11.webp",alt:"sync_map_11.png"}})]),a._v(" "),s("h4",{attrs:{id:"loadorstore-工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loadorstore-工作流程"}},[a._v("#")]),a._v(" LoadOrStore 工作流程")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("key")]),a._v(" 在 "),s("code",[a._v("read map")]),a._v(" 中找到，尝试在 "),s("code",[a._v("read map")]),a._v(" 中 "),s("code",[a._v("Load")]),a._v(" 或 "),s("code",[a._v("Store")]),a._v("，操作成功则返回。找不到则加锁，然后二次检查（"),s("code",[a._v("double checking")]),a._v("）。")]),a._v(" "),s("li",[a._v("在 "),s("code",[a._v("read map")]),a._v(" 中依然找不到，但是 "),s("code",[a._v("key")]),a._v(" 在 "),s("code",[a._v("dirty map")]),a._v(" 中找到，尝试在 "),s("code",[a._v("dirty map")]),a._v(" 中 "),s("code",[a._v("Load")]),a._v(" 或 "),s("code",[a._v("Store")]),a._v("，操作成功则返回。（"),s("code",[a._v("missLocked")]),a._v("）")]),a._v(" "),s("li",[s("code",[a._v("key")]),a._v(" 不存在，往 "),s("code",[a._v("dirty map")]),a._v(" 中写入 "),s("code",[a._v("key")]),a._v(" 和 "),s("code",[a._v("value")]),a._v("。（如果 "),s("code",[a._v("dirty map")]),a._v(" 为 "),s("code",[a._v("nil")]),a._v("，则先进行初始化），然后"),s("code",[a._v("read map")]),a._v(" 的 "),s("code",[a._v("amended")]),a._v(" 修改为 "),s("code",[a._v("true")]),a._v("。")])]),a._v(" "),s("h4",{attrs:{id:"tryloadorstore-源码剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tryloadorstore-源码剖析"}},[a._v("#")]),a._v(" tryLoadOrStore 源码剖析")]),a._v(" "),s("p",[a._v("我们发现，在 "),s("code",[a._v("LoadOrStore")]),a._v(" 方法中，找到 "),s("code",[a._v("key")]),a._v(" 之后，都是调用 "),s("code",[a._v("tryLoadOrStore")]),a._v(" 方法来进行 "),s("code",[a._v("Load")]),a._v(" 或 "),s("code",[a._v("Store")]),a._v(" 操作的。 它的作用就是在 "),s("code",[a._v("entry")]),a._v(" 上尝试 "),s("code",[a._v("Load")]),a._v(" 或 "),s("code",[a._v("Store")]),a._v(" 操作，简单来说就是，如果 "),s("code",[a._v("key")]),a._v(" 已经存在则 "),s("code",[a._v("Load")]),a._v("，否则 "),s("code",[a._v("Store")]),a._v("（当然，实际上没有这么简单）。")]),a._v(" "),s("p",[a._v("我们先来看看它的源码：")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果 entry 未被删除，tryLoadOrStore 会自动加载或存储一个值。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果 entry 被删除，tryLoadOrStore 将保持条目不变并返回 ok==false。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 返回值：")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ok：操作是否成功（Load 成功、Store 成功）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// loaded：表示是否是 Load 出来的")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// actual：Load 到的值")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("e "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tryLoadOrStore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("actual any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" loaded"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取 entry 的状态")]),a._v("\n   p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 这个 key 只存在于 read map 中，并且它已经被删除了")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" expunged "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// key 是正常状态，Load 成功，返回")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// p 是 nil，说明 key 不存在，需要 Store")]),a._v("\n   ic "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" i\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 循环直到 Load 或者 Store 成功（类似自旋锁）")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Store 成功")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("CompareAndSwap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("ic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Store 失败，重新获取 entry 的状态")]),a._v("\n      p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 被删除了")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" expunged "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 还没被删除，说明 key 存在")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br")])]),s("p",[s("code",[a._v("tryLoadOrStore")]),a._v(" 的逻辑可以用下图表示：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/12.webp",alt:"sync_map_12.png"}})]),a._v(" "),s("p",[a._v("在 "),s("code",[a._v("p")]),a._v(" 是 "),s("code",[a._v("nil")]),a._v(" 的情况下，会有一个 "),s("code",[a._v("for")]),a._v(" 循环一直尝试 "),s("code",[a._v("Load")]),a._v(" 或者 "),s("code",[a._v("Store")]),a._v("，一旦成功就会返回。")]),a._v(" "),s("h4",{attrs:{id:"unexpungelocked-的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unexpungelocked-的作用"}},[a._v("#")]),a._v(" unexpungeLocked 的作用")]),a._v(" "),s("p",[a._v("在 "),s("code",[a._v("LoadOrStore")]),a._v(" 方法中，我们发现，如果 "),s("code",[a._v("key")]),a._v(" 在 "),s("code",[a._v("read map")]),a._v(" 中找到，会先调用 "),s("code",[a._v("unexpungeLocked")]),a._v(" 方法。 读到这里，可能很多读者对 "),s("code",[a._v("expunge")]),a._v(" 和 "),s("code",[a._v("unexpunge")]),a._v(" 有点懵逼，不知道它们是干什么的。")]),a._v(" "),s("p",[a._v("简单来说，"),s("code",[a._v("expunge")]),a._v(" 就是表明 "),s("code",[a._v("key")]),a._v(" 已经被删除了，并且这个 "),s("code",[a._v("key")]),a._v(" 只存在于 "),s("code",[a._v("read map")]),a._v(" 中（在 "),s("code",[a._v("dirty map")]),a._v(" 中不存在）。 而 "),s("code",[a._v("unexpunge")]),a._v(" 的作用就是取消 "),s("code",[a._v("expunge")]),a._v(" 的效果（因为要往这个 "),s("code",[a._v("key")]),a._v(" 写入新的值了），紧接着我们会往 "),s("code",[a._v("dirty map")]),a._v(" 中写入这个 "),s("code",[a._v("key")]),a._v("。")]),a._v(" "),s("p",[a._v("我们可以结合下图来思考一下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/13.webp",alt:"sync_map_13.png"}})]),a._v(" "),s("blockquote",[s("p",[a._v("注意：实际中 "),s("code",[a._v("entry")]),a._v(" 并不是连续存储的。")])]),a._v(" "),s("p",[s("code",[a._v("expunged")]),a._v(" 状态说明：")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("p == expunged")]),a._v("，"),s("code",[a._v("key")]),a._v(" 已被删除，并且 "),s("code",[a._v("dirty map")]),a._v(" 不为 "),s("code",[a._v("nil")]),a._v("，并且 "),s("code",[a._v("dirty")]),a._v(" 中没有这个 "),s("code",[a._v("key")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("p == nil")]),a._v("，"),s("code",[a._v("key")]),a._v(" 已被删除，并且 "),s("code",[a._v("dirty map")]),a._v(" 为 "),s("code",[a._v("nil")]),a._v("，或 "),s("code",[a._v("dirty[k]")]),a._v(" 指向该 "),s("code",[a._v("entry")]),a._v("。("),s("code",[a._v("Store")]),a._v(")")]),a._v(" "),s("li",[s("code",[a._v("p != nil")]),a._v("，"),s("code",[a._v("key")]),a._v(" 正常，返回其值。("),s("code",[a._v("Load")]),a._v(")")])]),a._v(" "),s("h3",{attrs:{id:"delete-源码剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delete-源码剖析"}},[a._v("#")]),a._v(" Delete 源码剖析")]),a._v(" "),s("p",[s("code",[a._v("Delete")]),a._v(" 方法实际上只是 "),s("code",[a._v("LoadAndDelete")]),a._v(" 的 wrapper 函数，所以我们看 "),s("code",[a._v("LoadAndDelete")]),a._v(" 就够了。 删除操作在 "),s("code",[a._v("sync.Map")]),a._v(" 中是一个很简单的操作，如果在 "),s("code",[a._v("read map")]),a._v(" 中找到了要删除的 "),s("code",[a._v("key")]),a._v("， 那么我们只需要将其设置为 "),s("code",[a._v("nil")]),a._v(" 就可以了。虽然它是一个写操作，但是依然不需要加锁。")]),a._v(" "),s("blockquote",[s("p",[a._v("如果在 "),s("code",[a._v("read map")]),a._v(" 中找到了 "),s("code",[a._v("key")]),a._v("，则可以不加锁也把它删除。因为 "),s("code",[a._v("sync.Map")]),a._v(" 中的删除只是一个标记。")])]),a._v(" "),s("p",[a._v("例外的情况是，它在 "),s("code",[a._v("read map")]),a._v(" 中找不到，然后就需要加锁，然后做 "),s("code",[a._v("double checking")]),a._v("，然后再去 "),s("code",[a._v("dirty map")]),a._v(" 中查找了。")]),a._v(" "),s("p",[s("code",[a._v("LoadAndDelete")]),a._v(" 的源码如下：")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// LoadAndDelete 删除键的值，返回以前的值（如果有）。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// loaded 报告 key 是否存在。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("LoadAndDelete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" loaded "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取 read map")]),a._v("\n   read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 从 read map 查找 key")]),a._v("\n   e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amended "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// read map 找不到那个 key，需要继续从 dirty map 中查找")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 加锁")]),a._v("\n      read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// double checking")]),a._v("\n      e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amended "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 需要继续从 dirty map 中查找")]),a._v("\n         e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 从 dirty map 中删除 key")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 直接做删除 key 的操作")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 累加未命中 read map 的次数")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("missLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// key 存在，做删除操作（设置 entry 为 nil 状态）")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// key 找不到，不需要做删除操作")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br")])]),s("p",[a._v("删除的操作会有两种情况：")]),a._v(" "),s("ul",[s("li",[a._v("存在于 "),s("code",[a._v("read map")]),a._v(" 中，则直接删除。（设置 "),s("code",[a._v("entry")]),a._v(" 指针为 "),s("code",[a._v("nil")]),a._v("，但是不会删除 "),s("code",[a._v("read map")]),a._v(" 中的 "),s("code",[a._v("key")]),a._v("）")]),a._v(" "),s("li",[a._v("只存在于 "),s("code",[a._v("dirty map")]),a._v(" 中，则直接删除。这种情况下，会删除 "),s("code",[a._v("dirty map")]),a._v(" 中的 "),s("code",[a._v("key")]),a._v("。")])]),a._v(" "),s("h4",{attrs:{id:"loadanddelete-图示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loadanddelete-图示"}},[a._v("#")]),a._v(" LoadAndDelete 图示")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/14.webp",alt:"sync_map_14.png"}})]),a._v(" "),s("h4",{attrs:{id:"loadanddelete-工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loadanddelete-工作流程"}},[a._v("#")]),a._v(" LoadAndDelete 工作流程")]),a._v(" "),s("ol",[s("li",[a._v("从 "),s("code",[a._v("read map")]),a._v(" 中查找 "),s("code",[a._v("key")]),a._v("，如果找到了，那么直接删除 "),s("code",[a._v("key")]),a._v("（将 "),s("code",[a._v("entry")]),a._v(" 的指针设置为 "),s("code",[a._v("nil")]),a._v("），并返回 "),s("code",[a._v("value")]),a._v("。")]),a._v(" "),s("li",[a._v("如果 "),s("code",[a._v("read map")]),a._v(" 中没有找到 "),s("code",[a._v("key")]),a._v("，并且 "),s("code",[a._v("read.amended")]),a._v(" 为 "),s("code",[a._v("true")]),a._v("，那么就需要加锁，然后做 "),s("code",[a._v("double checking")]),a._v("。")]),a._v(" "),s("li",[a._v("加锁后在 "),s("code",[a._v("read map")]),a._v(" 依然找不到，并且 "),s("code",[a._v("read.amended")]),a._v(" 为 "),s("code",[a._v("true")]),a._v("，那么就需要从 "),s("code",[a._v("dirty map")]),a._v(" 中查找 "),s("code",[a._v("key")]),a._v("。")]),a._v(" "),s("li",[a._v("同时在临界区内直接执行 "),s("code",[a._v("delete")]),a._v(" 操作，将 "),s("code",[a._v("key")]),a._v(" 从 "),s("code",[a._v("dirty map")]),a._v(" 中删除。同时累加 "),s("code",[a._v("misses")]),a._v(" 次数。")]),a._v(" "),s("li",[a._v("最后，如果找到了 "),s("code",[a._v("key")]),a._v(" 对应的 "),s("code",[a._v("entry")]),a._v("，则将其删除（设置 "),s("code",[a._v("entry")]),a._v(" 指针为 "),s("code",[a._v("nil")]),a._v("），并返回 "),s("code",[a._v("value")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"range-源码剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#range-源码剖析"}},[a._v("#")]),a._v(" Range 源码剖析")]),a._v(" "),s("p",[s("code",[a._v("Range")]),a._v(" 方法的作用是遍历 "),s("code",[a._v("sync.Map")]),a._v(" 中的所有 "),s("code",[a._v("key")]),a._v(" 和 "),s("code",[a._v("value")]),a._v("，它接受一个函数作为参数，如果这个函数返回 "),s("code",[a._v("false")]),a._v("，那么就会停止遍历。")]),a._v(" "),s("p",[s("code",[a._v("Range")]),a._v(" 的源码如下：")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Range 依次为映射中存在的每个键和值调用 f。 如果 f 返回 false，则 range 停止迭代。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("f "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" value any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 我们需要能够遍历在调用 Range 开始时已经存在的所有键。")]),a._v("\n   read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amended "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// dirty map 中包含了 read map 中没有的 key")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amended "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 使用 m.dirty 中的数据覆盖 m.read 中的数据")]),a._v("\n         read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" readOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Store")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 重置 dirty map")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 重置 misses")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("misses "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 所有的 key 都在 read map 中了，遍历 read map 即可")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("range")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 已经被删除")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("continue")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// f 可以返回一个 bool 值，如果返回 false，那么就停止遍历")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("break")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br")])]),s("h4",{attrs:{id:"range-图示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#range-图示"}},[a._v("#")]),a._v(" Range 图示")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/15.webp",alt:"sync_map_15.png"}})]),a._v(" "),s("p",[s("code",[a._v("Range")]),a._v(" 遍历的时候，只会遍历 "),s("code",[a._v("read map")]),a._v(" 中的 "),s("code",[a._v("key")]),a._v("。如果 "),s("code",[a._v("read.amended")]),a._v(" 为 "),s("code",[a._v("true")]),a._v("，那么就需要加锁，然后做 "),s("code",[a._v("double checking")]),a._v("， 如果二次检查 "),s("code",[a._v("read.amended")]),a._v(" 还是 "),s("code",[a._v("true")]),a._v("，那么就需要将 "),s("code",[a._v("dirty map")]),a._v(" 中的数据覆盖到 "),s("code",[a._v("read map")]),a._v(" 中。")]),a._v(" "),s("h4",{attrs:{id:"range-工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#range-工作流程"}},[a._v("#")]),a._v(" Range 工作流程")]),a._v(" "),s("ol",[s("li",[a._v("为了保证能遍历 "),s("code",[a._v("sync.Map")]),a._v(" 中所有的 "),s("code",[a._v("key")]),a._v("，需要判断 "),s("code",[a._v("read.amended")]),a._v(" 是否为 "),s("code",[a._v("true")]),a._v("。")]),a._v(" "),s("li",[a._v("如果为 "),s("code",[a._v("true")]),a._v("，说明只有 "),s("code",[a._v("dirty map")]),a._v(" 中包含了所有的 "),s("code",[a._v("key")]),a._v("，那么就需要将 "),s("code",[a._v("dirty map")]),a._v(" 转换为 "),s("code",[a._v("read map")]),a._v("。（这样的好处是，可以在遍历过程中，不需要加锁）")]),a._v(" "),s("li",[a._v("然后开始遍历，遍历的时候只需要遍历 "),s("code",[a._v("read map")]),a._v(" 即可，因为这个时候 "),s("code",[a._v("read map")]),a._v(" 中包含了所有的 "),s("code",[a._v("key")]),a._v("。")]),a._v(" "),s("li",[a._v("遍历过程中，如果发现 "),s("code",[a._v("key")]),a._v(" 已经被删除，则直接跳过。否则将 "),s("code",[a._v("key")]),a._v(" 和 "),s("code",[a._v("value")]),a._v(" 传递给 "),s("code",[a._v("f")]),a._v(" 函数，如果 "),s("code",[a._v("f")]),a._v(" 函数返回 "),s("code",[a._v("false")]),a._v("，那么就停止遍历。")])]),a._v(" "),s("h3",{attrs:{id:"compareandswap-源码剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compareandswap-源码剖析"}},[a._v("#")]),a._v(" CompareAndSwap 源码剖析")]),a._v(" "),s("p",[s("code",[a._v("CompareAndSwap")]),a._v(" 方法的作用是比较 "),s("code",[a._v("key")]),a._v(" 对应的 "),s("code",[a._v("value")]),a._v(" 是否为 "),s("code",[a._v("old")]),a._v("，如果是，则将 "),s("code",[a._v("key")]),a._v(" 对应的 "),s("code",[a._v("value")]),a._v(" 设置为 "),s("code",[a._v("new")]),a._v("。")]),a._v(" "),s("p",[s("code",[a._v("CompareAndSwap")]),a._v(" 的源码如下：")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果映射中存储的值等于旧值，则 CompareAndSwap 会交换 key 的旧值和新值")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 旧值必须是可比较的类型。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("CompareAndSwap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" old"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("new")]),a._v(" any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("bool")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取 read map")]),a._v("\n   read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 从 read map 读取 key 对应的 value")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 在 read map 中找到了，进行 CAS 操作")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tryCompareAndSwap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("old"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amended "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 在 dirty map 也没有，返回 false")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 加锁")]),a._v("\n   m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("defer")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   swapped "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// double checking")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 在 read map 中找到了，进行 CAS 操作")]),a._v("\n      swapped "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tryCompareAndSwap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("old"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 在 dirty map 中找到了，进行 CAS 操作")]),a._v("\n      swapped "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tryCompareAndSwap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("old"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 累加 misses 次数")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("missLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" swapped\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br")])]),s("h4",{attrs:{id:"compareandswap-图示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compareandswap-图示"}},[a._v("#")]),a._v(" CompareAndSwap 图示")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/16.webp",alt:"sync_map_16.png"}})]),a._v(" "),s("p",[a._v("其实到这里，我们应该发现了，其实 "),s("code",[a._v("sync.Map")]),a._v(" 的大多数方法的实现都是先从 "),s("code",[a._v("read map")]),a._v(" 中读取，如果没有找到，那么就从 "),s("code",[a._v("dirty map")]),a._v(" 中读取。 只是从 "),s("code",[a._v("read map")]),a._v(" 中读取的时候，需要加锁，然后做 "),s("code",[a._v("double checking")]),a._v("。")]),a._v(" "),s("h4",{attrs:{id:"compareandswap-工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compareandswap-工作流程"}},[a._v("#")]),a._v(" CompareAndSwap 工作流程")]),a._v(" "),s("ol",[s("li",[a._v("首先从 "),s("code",[a._v("read map")]),a._v(" 中读取 "),s("code",[a._v("key")]),a._v(" 对应的 "),s("code",[a._v("value")]),a._v("。如果找到则进行 "),s("code",[a._v("CAS")]),a._v(" 操作，如果没有找到，那么就需要加锁，然后做 "),s("code",[a._v("double checking")]),a._v("。")]),a._v(" "),s("li",[a._v("如果还是没找到。则从 "),s("code",[a._v("dirty map")]),a._v(" 中查找，找到则做 CAS 操作，然后累加 "),s("code",[a._v("misses")]),a._v(" 次数。")]),a._v(" "),s("li",[a._v("如果还是没找到，那么就返回 "),s("code",[a._v("false")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"compareanddelete-源码剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compareanddelete-源码剖析"}},[a._v("#")]),a._v(" CompareAndDelete 源码剖析")]),a._v(" "),s("p",[s("code",[a._v("CompareAndDelete")]),a._v(" 方法的作用是比较 "),s("code",[a._v("key")]),a._v(" 对应的 "),s("code",[a._v("value")]),a._v(" 是否为 "),s("code",[a._v("old")]),a._v("，如果是，则将 "),s("code",[a._v("key")]),a._v(" 对应的 "),s("code",[a._v("value")]),a._v(" 删除。")]),a._v(" "),s("p",[s("code",[a._v("CompareAndDelete")]),a._v(" 的源码如下：")]),a._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果 key 的值等于 old，CompareAndDelete 会删除它的条目。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 旧值必须是可比较的类型。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果 map 中的 key 的值不等于 old，则 CompareAndDelete 返回 false（即使旧值是 nil 接口值）。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("CompareAndDelete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" old any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("deleted "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取 read map")]),a._v("\n   read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// read map 中不存在这个 key，并且 dirty map 中包含了一些 read map 中没有的 key")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amended "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 加锁")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      read "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// double checking")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("amended "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// dirty map 中包含 read map 中不存在的 key")]),a._v("\n         e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 累加 misses 次数")]),a._v("\n         m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("missLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果 key 存在，并且其值等于 old，则将其删除。")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 已经被删除，或者值不等于 old，返回 false，表示删除失败")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" expunged "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" old "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 将其删除（本质上是一个 CAS 操作，将其状态修改为了 nil）")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("CompareAndSwap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// key 找不到，返回 false")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br")])]),s("h4",{attrs:{id:"compareanddelete-图示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compareanddelete-图示"}},[a._v("#")]),a._v(" CompareAndDelete 图示")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/go/syncmap/17.webp",alt:"sync_map_17.png"}})]),a._v(" "),s("h4",{attrs:{id:"compareanddelete-工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compareanddelete-工作流程"}},[a._v("#")]),a._v(" CompareAndDelete 工作流程")]),a._v(" "),s("ol",[s("li",[a._v("首先从 "),s("code",[a._v("read map")]),a._v(" 中读取 "),s("code",[a._v("key")]),a._v(" 对应的 "),s("code",[a._v("value")]),a._v("。如果找到则进行 "),s("code",[a._v("CAS")]),a._v(" 操作，如果没有找到，那么就需要加锁，然后做 "),s("code",[a._v("double checking")]),a._v("。")]),a._v(" "),s("li",[a._v("如果还是没找到。并且 "),s("code",[a._v("dirty map")]),a._v(" 中包含了部分 "),s("code",[a._v("read map")]),a._v(" 中不存在的 "),s("code",[a._v("key")]),a._v("，则从 "),s("code",[a._v("dirty map")]),a._v(" 中查找，找到则做 CAS 操作，然后累加 "),s("code",[a._v("misses")]),a._v(" 次数。")]),a._v(" "),s("li",[a._v("如果找到了 "),s("code",[a._v("key")]),a._v("，会通过原子操作读取其之前的值。如果发现它已经被删除或者旧值不等于 "),s("code",[a._v("old")]),a._v("，则返回 "),s("code",[a._v("false")]),a._v("。否则通过 "),s("code",[a._v("CAS")]),a._v(" 操作将其删除，然后返回 "),s("code",[a._v("true")]),a._v("。")]),a._v(" "),s("li",[a._v("如果没有找到 "),s("code",[a._v("key")]),a._v("，则返回 "),s("code",[a._v("false")]),a._v("。")])]),a._v(" "),s("h2",{attrs:{id:"entry-的一些说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entry-的一些说明"}},[a._v("#")]),a._v(" entry 的一些说明")]),a._v(" "),s("p",[s("code",[a._v("entry")]),a._v(" 这个结构体是 "),s("code",[a._v("sync.Map")]),a._v(" 中实际保存值的结构体，它保存了指向了 "),s("code",[a._v("key")]),a._v(" 对应值的指针。")]),a._v(" "),s("p",[a._v("在上面阅读代码的过程中，我们发现，"),s("code",[a._v("entry")]),a._v(" 中有很多方法使用了 "),s("code",[a._v("try")]),a._v(" 前缀，比如 "),s("code",[a._v("trySwap")]),a._v(", "),s("code",[a._v("tryLoadOrStore")]),a._v(" 等。对于这类方法，我们需要知道的是：")]),a._v(" "),s("ol",[s("li",[a._v("它并不保证操作一定成功，因为一些写操作是不需要持有互斥锁就可以进行的（比如删除操作，只是一个原子操作，将 "),s("code",[a._v("entry")]),a._v(" 指向了 "),s("code",[a._v("nil")]),a._v("）。")]),a._v(" "),s("li",[a._v("这类方法里面，有一个 "),s("code",[a._v("for")]),a._v(" 循环，来进行多次尝试，直到操作成功，又或者发现 "),s("code",[a._v("entry")]),a._v(" 已经被删除的时候就返回。类似自旋锁。")]),a._v(" "),s("li",[a._v("这类方法里面对 "),s("code",[a._v("entry")]),a._v(" 状态的修改是通过 "),s("code",[a._v("CAS")]),a._v(" 操作来实现的。")])]),a._v(" "),s("h2",{attrs:{id:"sync-map-源码总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sync-map-源码总结"}},[a._v("#")]),a._v(" sync.Map 源码总结")]),a._v(" "),s("p",[a._v("一顿源码看下来，我们不难发现，"),s("code",[a._v("sync.Map")]),a._v(" 的大部分方法整体处理流程上是非常相似的，都是先从 "),s("code",[a._v("read map")]),a._v(" 中读取，如果没有找到，那么就需要加锁，然后做 "),s("code",[a._v("double checking")]),a._v("。如果还是没找到，那么就从 "),s("code",[a._v("dirty map")]),a._v(" 中查找，如果还是没找到，那么就返回 "),s("code",[a._v("false")]),a._v("。")]),a._v(" "),s("p",[a._v("这样做的目的都是在尽量地减少锁的占用，从而获得更好的性能。")]),a._v(" "),s("p",[a._v("同时，如果在 "),s("code",[a._v("dirty map")]),a._v(" 中查找的次数多了，会触发 "),s("code",[a._v("dirty map")]),a._v(" 转换为 "),s("code",[a._v("read map")]),a._v(" 的操作流程，这样一来，下一次搜索同样的 "),s("code",[a._v("key")]),a._v(" 就不再需要加锁了。")]),a._v(" "),s("p",[a._v("最后一个关键的点是，在 "),s("code",[a._v("sync.Map")]),a._v(" 中没有被锁保护的地方，都是通过原子操作来实现的，这样一来，就可以保证在多核 CPU 上的并发安全。")]),a._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),s("ul",[s("li",[s("p",[s("code",[a._v("sync.Map")]),a._v(" 中的 "),s("code",[a._v("key")]),a._v(" 有两份，一份在 "),s("code",[a._v("read map")]),a._v(" 中，一份在 "),s("code",[a._v("dirty map")]),a._v(" 中。"),s("code",[a._v("read map")]),a._v(" 中的 "),s("code",[a._v("key")]),a._v(" 是不可变的，而 "),s("code",[a._v("dirty map")]),a._v(" 中的 "),s("code",[a._v("key")]),a._v(" 是可变的。")])]),a._v(" "),s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("sync.Map\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("中的大多数操作的操作流程如下：")]),a._v(" "),s("ul",[s("li",[a._v("首先从 "),s("code",[a._v("read map")]),a._v(" 中读取 "),s("code",[a._v("key")]),a._v(" 对应的 "),s("code",[a._v("value")]),a._v("。找到则做相应操作。")]),a._v(" "),s("li",[a._v("如果没找到，则加锁，再做一次 "),s("code",[a._v("double checking")]),a._v("。找到则做相应操作。")]),a._v(" "),s("li",[a._v("如果还是没找到，那么就从 "),s("code",[a._v("dirty map")]),a._v(" 中查找，找到则做相应操作。")]),a._v(" "),s("li",[a._v("从 "),s("code",[a._v("dirty map")]),a._v(" 找到的时候，需要累加 "),s("code",[a._v("misses")]),a._v(" 次数，如果 "),s("code",[a._v("misses")]),a._v(" 次数超过了 "),s("code",[a._v("dirty map")]),a._v(" 的大小，那么就会触发 "),s("code",[a._v("dirty map")]),a._v(" 转换为 "),s("code",[a._v("read map")]),a._v(" 的操作流程。")])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("sync.Map")]),a._v(" 中的 "),s("code",[a._v("read map")]),a._v(" 和 "),s("code",[a._v("dirty map")]),a._v(" 中相同的 "),s("code",[a._v("key")]),a._v(" 指向了同一个 "),s("code",[a._v("value")]),a._v("（是一个 "),s("code",[a._v("entry")]),a._v(" 结构体实例）。")])]),a._v(" "),s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("entry\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("有三种状态：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("nil")]),a._v(": 表示 "),s("code",[a._v("key")]),a._v(" 已被删除。")]),a._v(" "),s("li",[s("code",[a._v("expunged")]),a._v(": 表示 "),s("code",[a._v("key")]),a._v(" 已被删除，并且 "),s("code",[a._v("dirty map")]),a._v(" 中没有这个 "),s("code",[a._v("key")]),a._v("，这个 "),s("code",[a._v("key")]),a._v(" 只存在于 "),s("code",[a._v("read map")]),a._v(" 中。")]),a._v(" "),s("li",[s("code",[a._v("*v")]),a._v(": 表示一个指向具体值的指针，是正常状态。")])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("sync.Map")]),a._v(" 中的大部分方法都是通过原子操作来实现的，这样一来，就可以保证在多核 CPU 上的并发安全。就算没有在锁保护的临界区内，这种操作依然可以保证对 "),s("code",[a._v("map")]),a._v(" 的操作不会出现错乱的情况。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("read map")]),a._v(" 中有一个字段标识了是否 "),s("code",[a._v("dirty map")]),a._v(" 中存在部分 "),s("code",[a._v("read map")]),a._v(" 中不存在的 "),s("code",[a._v("key")]),a._v("。这样一来，如果在 "),s("code",[a._v("read map")]),a._v(" 中找不到 "),s("code",[a._v("key")]),a._v(" 的时候，就可以先判断一下 "),s("code",[a._v("read.amended")]),a._v(" 是否为 "),s("code",[a._v("true")]),a._v("，如果是 "),s("code",[a._v("true")]),a._v("，才需要进行加锁，然后再去 "),s("code",[a._v("dirty map")]),a._v(" 中查找。这样一来，就可以减少加锁的次数，从而获得更好的性能。")])]),a._v(" "),s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("dirty map\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("和")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("read map\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("之间是会相互转换：")]),a._v(" "),s("ul",[s("li",[a._v("在 "),s("code",[a._v("dirty map")]),a._v(" 中查找 "),s("code",[a._v("key")]),a._v(" 的次数超过了 "),s("code",[a._v("dirty map")]),a._v(" 的大小，就会触发 "),s("code",[a._v("dirty map")]),a._v(" 转换为 "),s("code",[a._v("read map")]),a._v(" 的操作流程。")]),a._v(" "),s("li",[a._v("需要写入新的 "),s("code",[a._v("key")]),a._v(" 的时候，如果 "),s("code",[a._v("dirty map")]),a._v(" 为 "),s("code",[a._v("nil")]),a._v("，那么会将 "),s("code",[a._v("read map")]),a._v(" 中未删除的 "),s("code",[a._v("key")]),a._v(" 写入到一个新创建的 "),s("code",[a._v("dirty map")]),a._v(" 中。")])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("sync.Map")]),a._v(" 性能更好的原因：尽量减少了加锁的次数，很多地方使用原子操作来保证并发安全。（如果我们的业务场景是写多读少，那么这一点可能就不成立了。）")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);