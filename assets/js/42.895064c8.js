(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{358:function(t,s,n){"use strict";n.r(s);var a=n(8),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("strong",[t._v("反射")]),t._v("是这样一种机制，它是可以让我们在程序运行时（runtime）访问、检测和修改对象本身状态或行为的一种能力。 比如，从一个变量推断出其类型信息、以及存储的数据的一些信息，又或者获取一个对象有什么方法可以调用等。 反射经常用在一些需要同时处理不同类型变量的地方，比如序列化、反序列化、"),s("code",[t._v("ORM")]),t._v(" 等等，如标准库里面的 "),s("code",[t._v("json.Marshal")]),t._v("。\n")]),t._v(" "),s("h2",{attrs:{id:"反射基础-go-的-interface-是怎么存储的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射基础-go-的-interface-是怎么存储的"}},[t._v("#")]),t._v(" 反射基础 - go 的 interface 是怎么存储的？")]),t._v(" "),s("p",[t._v("在正式开始讲解反射之前，我们有必要了解一下 go 里的接口（"),s("code",[t._v("interface")]),t._v("）是怎么存储的。 关于这个问题，在我的另外一篇文章中已经做了很详细的讲解 "),s("a",{attrs:{href:"/pages/golang/go-interface"}},[t._v("go interface 设计与实现")]),t._v("， 这里不再赘述。但还是简单说一下，go 的接口是由两部分组成的，一部分是类型信息，另一部分是数据信息，如：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("对于这个例子，"),s("code",[t._v("b")]),t._v(" 的类型信息是 "),s("code",[t._v("int")]),t._v("，数据信息是 "),s("code",[t._v("1")]),t._v("，这两部分信息都是存储在 "),s("code",[t._v("b")]),t._v(" 里面的。"),s("code",[t._v("b")]),t._v(" 的内存结构如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/go/reflect1/1.webp",alt:"reflect_1.png"}})]),t._v(" "),s("p",[t._v("在上图中，"),s("code",[t._v("b")]),t._v(" 的类型实际上是 "),s("code",[t._v("eface")]),t._v("，它是一个空接口，它的定义如下：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" eface "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_type\n    data  unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("也就是说，"),s("strong",[t._v("一个 interface{} 中实际上既包含了变量的类型信息，也包含了类型的数据。")]),t._v(" 正因为如此，我们才可以通过反射来获取到变量的类型信息，以及变量的数据信息。")]),t._v(" "),s("h2",{attrs:{id:"反射对象-reflect-type-和-reflect-value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射对象-reflect-type-和-reflect-value"}},[t._v("#")]),t._v(" 反射对象 - reflect.Type 和 reflect.Value")]),t._v(" "),s("p",[t._v("知道了 "),s("code",[t._v("interface{}")]),t._v(" 的内存结构之后，我们就可以开始讲解反射了。反射的核心是两个对象，分别是 "),s("code",[t._v("reflect.Type")]),t._v(" 和 "),s("code",[t._v("reflect.Value")]),t._v("。 它们分别代表了 go 语言中的类型和值。我们可以通过 "),s("code",[t._v("reflect.TypeOf")]),t._v(" 和 "),s("code",[t._v("reflect.ValueOf")]),t._v(" 来获取到一个变量的类型和值。")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\nt1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("我们去看一下 "),s("code",[t._v("TypeOf")]),t._v(" 和 "),s("code",[t._v("ValueOf")]),t._v(" 的源码会发现，这两个方法都接收一个 "),s("code",[t._v("interface{}")]),t._v(" 类型的参数，然后返回一个 "),s("code",[t._v("reflect.Type")]),t._v(" 和 "),s("code",[t._v("reflect.Value")]),t._v(" 类型的值。这也就是为什么我们可以通过 "),s("code",[t._v("reflect.TypeOf")]),t._v(" 和 "),s("code",[t._v("reflect.ValueOf")]),t._v(" 来获取到一个变量的类型和值的原因。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/go/reflect1/2.webp",alt:"reflect_2.png"}})]),t._v(" "),s("h2",{attrs:{id:"反射定律"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射定律"}},[t._v("#")]),t._v(" 反射定律")]),t._v(" "),s("p",[t._v("在 go 官方博客中关于反射的文章 "),s("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fgo.dev%2Fblog%2Flaws-of-reflection",target:"_blank",rel:"noopener noreferrer"}},[t._v("laws-of-reflection"),s("OutboundLink")],1),t._v(" 中，提到了三条反射定律：")]),t._v(" "),s("ol",[s("li",[t._v("反射可以将 "),s("code",[t._v("interface")]),t._v(" 类型变量转换成反射对象。")]),t._v(" "),s("li",[t._v("反射可以将反射对象还原成 "),s("code",[t._v("interface")]),t._v(" 对象。")]),t._v(" "),s("li",[t._v("如果要修改反射对象，那么反射对象必须是可设置的（"),s("code",[t._v("CanSet")]),t._v("）。")])]),t._v(" "),s("p",[t._v("关于这三条定律，官方博客已经有了比较完整的阐述，感兴趣的可以去看一下官方博客的文章。这里简单阐述一下：")]),t._v(" "),s("h3",{attrs:{id:"反射可以将-interface-类型变量转换成反射对象。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射可以将-interface-类型变量转换成反射对象。"}},[t._v("#")]),t._v(" 反射可以将 "),s("code",[t._v("interface")]),t._v(" 类型变量转换成反射对象。")]),t._v(" "),s("p",[t._v("其实也就是上面的 "),s("code",[t._v("reflect.Type")]),t._v(" 和 "),s("code",[t._v("reflect.Value")]),t._v("，我们可以通过 "),s("code",[t._v("reflect.TypeOf")]),t._v(" 和 "),s("code",[t._v("reflect.ValueOf")]),t._v(" 来获取到一个变量的反射类型和反射值。")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\ntypeOfA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nvalueOfA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"反射可以将反射对象还原成-interface-对象。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射可以将反射对象还原成-interface-对象。"}},[t._v("#")]),t._v(" 反射可以将反射对象还原成 "),s("code",[t._v("interface")]),t._v(" 对象。")]),t._v(" "),s("p",[t._v("我们可以通过 "),s("code",[t._v("reflect.Value.Interface")]),t._v(" 来获取到反射对象的 "),s("code",[t._v("interface")]),t._v(" 对象，也就是传递给 "),s("code",[t._v("reflect.ValueOf")]),t._v(" 的那个变量本身。 不过返回值类型是 "),s("code",[t._v("interface{}")]),t._v("，所以我们需要进行类型断言。")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" valueOfA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"如果要修改反射对象-那么反射对象必须是可设置的-canset-。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果要修改反射对象-那么反射对象必须是可设置的-canset-。"}},[t._v("#")]),t._v(" 如果要修改反射对象，那么反射对象必须是可设置的（"),s("code",[t._v("CanSet")]),t._v("）。")]),t._v(" "),s("p",[t._v("我们可以通过 "),s("code",[t._v("reflect.Value.CanSet")]),t._v(" 来判断一个反射对象是否是可设置的。如果是可设置的，我们就可以通过 "),s("code",[t._v("reflect.Value.Set")]),t._v(" 来修改反射对象的值。 这其实也是非常场景的使用反射的一个场景，通过反射来修改变量的值。")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.4")]),t._v("\nv "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"settability of v:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CanSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"settability of v:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Elem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CanSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("那什么情况下一个反射对象是可设置的呢？前提是这个反射对象是一个指针，然后这个指针指向的是一个可设置的变量。 在我们传递一个值给 "),s("code",[t._v("reflect.ValueOf")]),t._v(" 的时候，如果这个值只是一个普通的变量，那么 "),s("code",[t._v("reflect.ValueOf")]),t._v(" 会返回一个不可设置的反射对象。 因为这个值实际上被拷贝了一份，我们如果通过反射修改这个值，那么实际上是修改的这个拷贝的值，而不是原来的值。 所以 go 语言在这里做了一个限制，如果我们传递进 "),s("code",[t._v("reflect.ValueOf")]),t._v(" 的变量是一个普通的变量，那么在我们设置反射对象的值的时候，会报错。 所以在上面这个例子中，我们传递了 "),s("code",[t._v("x")]),t._v(" 的指针变量作为参数。这样，运行时就可以找到 "),s("code",[t._v("x")]),t._v(" 本身，而不是 "),s("code",[t._v("x")]),t._v(" 的拷贝，所以就可以修改 "),s("code",[t._v("x")]),t._v(" 的值了。")]),t._v(" "),s("p",[t._v("但同时我们也注意到了，在上面这个例子中，"),s("code",[t._v("v.CanSet()")]),t._v(" 返回的是 "),s("code",[t._v("false")]),t._v("，而 "),s("code",[t._v("v.Elem().CanSet()")]),t._v(" 返回的是 "),s("code",[t._v("true")]),t._v("。 这是因为，"),s("code",[t._v("v")]),t._v(" 是一个指针，而 "),s("code",[t._v("v.Elem()")]),t._v(" 是指针指向的值，对于这个指针本身，我们修改它是没有意义的，我们可以设想一下， 如果我们修改了指针变量（也就是修改了指针变量指向的地址），那会发生什么呢？那样我们的指针变量就不是指向 "),s("code",[t._v("x")]),t._v(" 了， 而是指向了其他的变量，这样就不符合我们的预期了。所以 "),s("code",[t._v("v.CanSet()")]),t._v(" 返回的是 "),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("p",[t._v("而 "),s("code",[t._v("v.Elem().CanSet()")]),t._v(" 返回的是 "),s("code",[t._v("true")]),t._v("。这是因为 "),s("code",[t._v("v.Elem()")]),t._v(" 才是 "),s("code",[t._v("x")]),t._v(" 本身，通过 "),s("code",[t._v("v.Elem()")]),t._v(" 修改 "),s("code",[t._v("x")]),t._v(" 的值是没有问题的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/go/reflect1/3.webp",alt:"reflect_3.png"}})]),t._v(" "),s("h2",{attrs:{id:"elem-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#elem-方法"}},[t._v("#")]),t._v(" Elem 方法")]),t._v(" "),s("p",[t._v("不知道有多少读者和我一样，在初次使用 go 的反射的时候，被 "),s("code",[t._v("Elem")]),t._v(" 这个方法搞得一头雾水。 "),s("code",[t._v("Elem")]),t._v(" 方法的作用是什么呢？在回答这个问题之前，我们需要明确一点："),s("code",[t._v("reflect.Value")]),t._v(" 和 "),s("code",[t._v("reflect.Type")]),t._v(" 这两个反射对象都有 "),s("code",[t._v("Elem")]),t._v(" 方法，既然是不同的对象，那么它们的作用自然是不一样的。")]),t._v(" "),s("h3",{attrs:{id:"reflect-value-的-elem-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-value-的-elem-方法"}},[t._v("#")]),t._v(" reflect.Value 的 Elem 方法")]),t._v(" "),s("p",[s("code",[t._v("reflect.Value")]),t._v(" 的 "),s("code",[t._v("Elem")]),t._v(" 方法的作用是"),s("strong",[t._v("获取指针指向的值，或者获取接口的动态值")]),t._v("。也就是说，能调用 "),s("code",[t._v("Elem")]),t._v(" 方法的反射对象，必须是一个指针或者一个接口。 在使用其他类型的 "),s("code",[t._v("reflect.Value")]),t._v(" 来调用 "),s("code",[t._v("Elem")]),t._v(" 方法的时候，会 "),s("code",[t._v("panic")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// panic: reflect: call of reflect.Value.Elem on int Value")]),t._v("\nreflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Elem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a\nreflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Elem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("对于指针很好理解，其实作用类似解引用。而对于接口，还是要回到 "),s("code",[t._v("interface")]),t._v(" 的结构本身，因为接口里包含了类型和数据本身，所以 "),s("code",[t._v("Elem")]),t._v(" 方法就是获取接口的数据部分（也就是 "),s("code",[t._v("iface")]),t._v(" 或 "),s("code",[t._v("eface")]),t._v(" 中的 "),s("code",[t._v("data")]),t._v(" 字段）。")]),t._v(" "),s("p",[t._v("指针类型：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/go/reflect1/4.webp",alt:"reflect_4.png"}})]),t._v(" "),s("p",[t._v("接口类型：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/go/reflect1/5.webp",alt:"reflect_5.png"}})]),t._v(" "),s("h3",{attrs:{id:"reflect-type-的-elem-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-type-的-elem-方法"}},[t._v("#")]),t._v(" reflect.Type 的 Elem 方法")]),t._v(" "),s("p",[s("code",[t._v("reflect.Type")]),t._v(" 的 "),s("code",[t._v("Elem")]),t._v(" 方法的作用是"),s("strong",[t._v("获取数组、chan、map、指针、切片关联元素的类型信息")]),t._v("，也就是说，对于 "),s("code",[t._v("reflect.Type")]),t._v(" 来说， 能调用 "),s("code",[t._v("Elem")]),t._v(" 方法的反射对象，必须是"),s("strong",[t._v("数组、chan、map、指针、切片中的一种")]),t._v("，其他类型的 "),s("code",[t._v("reflect.Type")]),t._v(" 调用 "),s("code",[t._v("Elem")]),t._v(" 方法会 "),s("code",[t._v("panic")]),t._v("。")]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组 [3]int")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [3]int")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Elem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// int")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("需要注意的是，如果我们要获取 map 类型 key 的类型信息，需要使用 "),s("code",[t._v("Key")]),t._v(" 方法，而不是 "),s("code",[t._v("Elem")]),t._v(" 方法。")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nt1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"interface-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interface-方法"}},[t._v("#")]),t._v(" Interface 方法")]),t._v(" "),s("p",[t._v("这也是非常常用的一个方法，"),s("code",[t._v("reflect.Value")]),t._v(" 的 "),s("code",[t._v("Interface")]),t._v(" 方法的作用是"),s("strong",[t._v("获取反射对象的动态值")]),t._v("。 也就是说，如果反射对象是一个指针，那么 "),s("code",[t._v("Interface")]),t._v(" 方法会返回指针指向的值。")]),t._v(" "),s("p",[t._v("简单来说，如果 "),s("code",[t._v("var i interface{} = x")]),t._v("，那么 "),s("code",[t._v("reflect.ValueOf(x).Interface()")]),t._v(" 就是 "),s("code",[t._v("i")]),t._v(" 本身，只不过其类型是 "),s("code",[t._v("interface{}")]),t._v(" 类型。")]),t._v(" "),s("h2",{attrs:{id:"kind"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kind"}},[t._v("#")]),t._v(" Kind")]),t._v(" "),s("p",[t._v("说到反射，不得不提的另外一个话题就是 go 的类型系统，对于开发者来说，我们可以基于基本类型来定义各种新的类型，如：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Kind 是 int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" myIny "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Kind 是 Struct")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Person "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Name "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n    Age "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("但是不管我们定义了多少种类型，在 go 看来都是下面的基本类型中的一个：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Kind "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n   Invalid Kind "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("\n   Bool\n   Int\n   Int8\n   Int16\n   Int32\n   Int64\n   Uint\n   Uint8\n   Uint16\n   Uint32\n   Uint64\n   Uintptr\n   Float32\n   Float64\n   Complex64\n   Complex128\n   Array\n   Chan\n   Func\n   Interface\n   Map\n   Pointer\n   Slice\n   String\n   Struct\n   UnsafePointer\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br")])]),s("p",[t._v("也就是说，我们定义的类型在 go 的类型系统中都是基本类型的一种，这个基本类型就是 "),s("code",[t._v("Kind")]),t._v("。 也正因为如此，我们可以通过"),s("strong",[t._v("有限的")]),t._v(" "),s("code",[t._v("reflect.Type")]),t._v(" 的 "),s("code",[t._v("Kind")]),t._v(" 来进行类型判断。 也就是说，我们在通过反射来判断变量的类型的时候，只需要枚举 "),s("code",[t._v("Kind")]),t._v(" 中的类型，然后通过 "),s("code",[t._v("reflect.Type")]),t._v(" 的 "),s("code",[t._v("Kind")]),t._v(" 方法来判断即可。")]),t._v(" "),s("blockquote",[s("p",[t._v("Type 表示的是反射对象（Type 对象是某一个 Kind，通过 Kind() 方法可以获取 Type 的 Kind），Kind 表示的是 go 底层类型系统中的类型。")])]),t._v(" "),s("p",[t._v("比如下面的例子：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Invalid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s = invalid\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Slice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s[%d]"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Struct"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NumField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         fieldPath "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s.%s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Field")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fieldPath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Field")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MapKeys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s[%s]"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("formatAny")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MapIndex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsNil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s = nil\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"(*%s)"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Elem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" reflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Interface"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsNil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s = nil\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s.type = %s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Elem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".value"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Elem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s = %s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("formatAny")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br")])]),s("blockquote",[s("p",[t._v("我们在开发的时候非常常用的结构体，在 go 的类型系统中，通通都是 "),s("code",[t._v("Struct")]),t._v(" 这种类型的。")])]),t._v(" "),s("h2",{attrs:{id:"addressable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#addressable"}},[t._v("#")]),t._v(" addressable")]),t._v(" "),s("p",[t._v("go 反射中最后一个很重要的话题是 "),s("code",[t._v("addressable")]),t._v("。在 go 的反射系统中有两个关于寻址的方法："),s("code",[t._v("CanAddr")]),t._v(" 和 "),s("code",[t._v("CanSet")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("CanAddr")]),t._v(" 方法的作用是判断反射对象是否可以寻址，也就是说，如果 "),s("code",[t._v("CanAddr")]),t._v(" 返回 "),s("code",[t._v("true")]),t._v("，那么我们就可以通过 "),s("code",[t._v("Addr")]),t._v(" 方法来获取反射对象的地址。 如果 "),s("code",[t._v("CanAddr")]),t._v(" 返回 "),s("code",[t._v("false")]),t._v("，那么我们就不能通过 "),s("code",[t._v("Addr")]),t._v(" 方法来获取反射对象的地址。对于这种情况，我们就无法通过反射对象来修改变量的值。")]),t._v(" "),s("p",[t._v("但是，"),s("code",[t._v("CanAddr")]),t._v(" 是 "),s("code",[t._v("true")]),t._v(" 并不是说 "),s("code",[t._v("reflect.Value")]),t._v(" 一定就能修改变量的值了。 "),s("code",[t._v("reflect.Value")]),t._v(" 还有一个方法 "),s("code",[t._v("CanSet")]),t._v("，只有 "),s("code",[t._v("CanSet")]),t._v(" 返回 "),s("code",[t._v("true")]),t._v("，我们才能通过反射对象来修改变量的值。")]),t._v(" "),s("p",[t._v("那么 "),s("code",[t._v("CanAddr")]),t._v(" 背后的含义是什么呢？它意味着我们传递给 "),s("code",[t._v("reflect.ValueOf")]),t._v(" 的变量是不是可以寻址的。 "),s("strong",[t._v("也就是说，我们的反射值对象拿到的是不是变量本身，而不是变量的副本。")]),t._v(" 如果我们是通过 "),s("code",[t._v("&v")]),t._v(" 这种方式来创建反射对象的，那么 "),s("code",[t._v("CanAddr")]),t._v(" 就会返回 "),s("code",[t._v("true")]),t._v("， 反之，如果我们是通过 "),s("code",[t._v("v")]),t._v(" 这种方式来创建反射对象的，那么 "),s("code",[t._v("CanAddr")]),t._v(" 就会返回 "),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("p",[t._v("如果想更详细的了解可以参考一下鸟窝的这篇文章 "),s("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fcolobu.com%2F2018%2F02%2F27%2Fgo-addressable%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("go addressable 详解"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"获取类型信息-reflect-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取类型信息-reflect-type"}},[t._v("#")]),t._v(" 获取类型信息 - reflect.Type")]),t._v(" "),s("h3",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[s("code",[t._v("reflect.Type")]),t._v(" 是一个接口，它代表了一个类型。我们可以通过 "),s("code",[t._v("reflect.TypeOf")]),t._v(" 来获取一个类型的 "),s("code",[t._v("reflect.Type")]),t._v(" 对象。 我们使用 "),s("code",[t._v("reflect.Type")]),t._v(" 的目的通常是为了获取类型的信息，比如类型是什么、类型的名称、类型的字段、类型的方法等等。 又或者最常见的场景：结构体中的 "),s("code",[t._v("json")]),t._v(" 的 "),s("code",[t._v("tag")]),t._v("，它是没有语义的，它的作用就是为了在序列化的时候，生成我们想要的字段名。 而这个 "),s("code",[t._v("tag")]),t._v(" 就是需要通过反射来获取的。")]),t._v(" "),s("h3",{attrs:{id:"通用的-type-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通用的-type-方法"}},[t._v("#")]),t._v(" 通用的 Type 方法")]),t._v(" "),s("p",[t._v("在 go 的反射系统中，是使用 "),s("code",[t._v("reflect.Type")]),t._v(" 这个接口来获取类型信息的。"),s("code",[t._v("reflect.Type")]),t._v(" 这个接口有很多方法，下面这些方法是所有的类型通用的方法：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Type 是 Go 类型的表示。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 并非所有方法都适用于所有类型。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在调用 kind 具体方法之前，先使用 Kind 方法找出类型的种类。因为调用一个方法如果类型不匹配会导致 panic")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Type 类型值是可以比较的，比如用 == 操作符。所以它可以用做 map 的 key")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果两个 Type 值代表相同的类型，那么它们一定是相等的。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Type "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Align 返回该类型在内存中分配时，以字节数为单位的字节数")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Align")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n   \n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// FieldAlign 返回该类型在结构中作为字段使用时，以字节数为单位的字节数")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FieldAlign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n   \n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Method 这个方法返回类型方法集中的第 i 个方法。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 i 不在[0, NumMethod()]范围内，就会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于非接口类型 T 或 *T，返回的 Method 的 Type 和 Func 字段描述了一个函数，")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其第一个参数是接收者，并且只能访问导出的方法。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于一个接口类型，返回的 Method 的 Type 字段给出的是方法签名，没有接收者，Func字段为nil。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法是按字典序顺序排列的。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Method\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// MethodByName 返回类型的方法集中具有该名称的方法和一个指示是否找到该方法的布尔值。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于非接口类型 T 或 *T，返回的 Method 的 Type 和 Func 字段描述了一个函数，")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其第一个参数是接收者。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于一个接口类型，返回的 Method 的 Type 字段给出的是方法签名，没有接收者，Func字段为nil。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MethodByName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NumMethod 返回使用 Method 可以访问的方法数量。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于非接口类型，它返回导出方法的数量。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于接口类型，它返回导出和未导出方法的数量。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NumMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Name 返回定义类型在其包中的类型名称。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于其他（未定义的）类型，它返回空字符串。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// PkgPath 返回一个定义类型的包的路径，也就是导入路径，导入路径是唯一标识包的类型，如 "encoding/base64"。')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型是预先声明的(string, error)或者没有定义(*T, struct{}, []int，或 A，其中 A 是一个非定义类型的别名），包的路径将是空字符串。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PkgPath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Size 返回存储给定类型的值所需的字节数。它类似于 unsafe.Sizeof.")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String 返回该类型的字符串表示。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串表示法可以使用缩短的包名。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// (例如，使用 base64 而不是 "encoding/base64")并且它并不能保证类型之间是唯一的。如果是为了测试类型标识，应该直接比较类型 Type。')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Kind 返回该类型的具体种类。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Kind\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Implements 表示该类型是否实现了接口类型 u。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Implements")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u Type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// AssignableTo 表示该类型的值是否可以分配给类型 u。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AssignableTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u Type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ConvertibleTo 表示该类型的值是否可转换为 u 类型。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConvertibleTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u Type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Comparable 表示该类型的值是否具有可比性。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Comparable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br"),s("span",{staticClass:"line-number"},[t._v("53")]),s("br"),s("span",{staticClass:"line-number"},[t._v("54")]),s("br"),s("span",{staticClass:"line-number"},[t._v("55")]),s("br"),s("span",{staticClass:"line-number"},[t._v("56")]),s("br"),s("span",{staticClass:"line-number"},[t._v("57")]),s("br"),s("span",{staticClass:"line-number"},[t._v("58")]),s("br"),s("span",{staticClass:"line-number"},[t._v("59")]),s("br"),s("span",{staticClass:"line-number"},[t._v("60")]),s("br"),s("span",{staticClass:"line-number"},[t._v("61")]),s("br"),s("span",{staticClass:"line-number"},[t._v("62")]),s("br"),s("span",{staticClass:"line-number"},[t._v("63")]),s("br"),s("span",{staticClass:"line-number"},[t._v("64")]),s("br")])]),s("h3",{attrs:{id:"某些类型特定的-type-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#某些类型特定的-type-方法"}},[t._v("#")]),t._v(" 某些类型特定的 Type 方法")]),t._v(" "),s("p",[t._v("下面是某些类型特定的方法，对于这些方法，如果我们使用的类型不对，则会 "),s("code",[t._v("panic")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Type "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Bits 以 bits 为单位返回类型的大小。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不属于：sized 或者 unsized Int, Uint, Float, 或者 Complex，会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bits")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ChanDir 返回一个通道类型的方向。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不是 Chan，会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ChanDir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ChanDir\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// IsVariadic 表示一个函数类型的最终输入参数是否为一个 "..." 可变参数。如果是，t.In(t.NumIn() - 1) 返回参数的隐式实际类型 []T.')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更具体的，如果 t 代表 func(x int, y ... float64)，那么：")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// t.NumIn() == 2")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// t.In(0)是 "int" 的 reflect.Type 反射类型。')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// t.In(1)是 "[]float64" 的 reflect.Type 反射类型。')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// t.IsVariadic() == true")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不是 Func，IsVariadic 会 panic")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsVariadic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Elem 返回一个 type 的元素类型。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不是 Array、Chan、Map、Ptr 或 Slice，就会 panic")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Elem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Type\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Field 返回一个结构类型的第 i 个字段。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不是 Struct，就会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 i 不在 [0, NumField()) 范围内也会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Field")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" StructField\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// FieldByIndex 返回索引序列对应的嵌套字段。它相当于对每一个 index 调用 Field。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不是 Struct，就会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FieldByIndex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" StructField\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// FieldByName 返回给定名称的结构字段和一个表示是否找到该字段的布尔值。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FieldByName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StructField"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// FieldByNameFunc 返回一个能满足 match 函数的带有名称的 field 字段。布尔值表示是否找到。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FieldByNameFunc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StructField"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// In 返回函数类型的第 i 个输入参数的类型。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不是 Func 类型会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 i 不在 [0, NumIn()) 的范围内，会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("In")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Type\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Key 返回一个 map 类型的 key 类型。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不是 Map，会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Type\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Len 返回一个数组类型的长度。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不是 Array，会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NumField 返回一个结构类型的字段数目。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不是 Struct，会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NumField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NumIn 返回一个函数类型的输入参数数。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不是Func.NumIn()，会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NumIn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NumOut 返回一个函数类型的输出参数数。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不是 Func.NumOut()，会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NumOut")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Out 返回一个函数类型的第 i 个输出参数的类型。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型的 Kind 不是 Func，会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 i 不在 [0, NumOut()) 的范围内，会 panic。")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Out")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Type\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br"),s("span",{staticClass:"line-number"},[t._v("53")]),s("br"),s("span",{staticClass:"line-number"},[t._v("54")]),s("br"),s("span",{staticClass:"line-number"},[t._v("55")]),s("br"),s("span",{staticClass:"line-number"},[t._v("56")]),s("br"),s("span",{staticClass:"line-number"},[t._v("57")]),s("br"),s("span",{staticClass:"line-number"},[t._v("58")]),s("br"),s("span",{staticClass:"line-number"},[t._v("59")]),s("br"),s("span",{staticClass:"line-number"},[t._v("60")]),s("br"),s("span",{staticClass:"line-number"},[t._v("61")]),s("br"),s("span",{staticClass:"line-number"},[t._v("62")]),s("br"),s("span",{staticClass:"line-number"},[t._v("63")]),s("br"),s("span",{staticClass:"line-number"},[t._v("64")]),s("br"),s("span",{staticClass:"line-number"},[t._v("65")]),s("br"),s("span",{staticClass:"line-number"},[t._v("66")]),s("br"),s("span",{staticClass:"line-number"},[t._v("67")]),s("br")])]),s("h3",{attrs:{id:"创建-reflect-type-的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-reflect-type-的方式"}},[t._v("#")]),t._v(" 创建 reflect.Type 的方式")]),t._v(" "),s("p",[t._v("我们可以通过下面的方式来获取变量的类型信息（创建 "),s("code",[t._v("reflect.Type")]),t._v(" 的方式）：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/go/reflect1/6.webp",alt:"reflect_6.png"}})]),t._v(" "),s("h2",{attrs:{id:"获取值信息-reflect-value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取值信息-reflect-value"}},[t._v("#")]),t._v(" 获取值信息 - reflect.Value")]),t._v(" "),s("h3",{attrs:{id:"概述-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[s("code",[t._v("reflect.Value")]),t._v(" 是一个结构体，它代表了一个值。 我们使用 "),s("code",[t._v("reflect.Value")]),t._v(" 可以实现一些接收多种类型参数的函数，又或者可以让我们在运行时针对值的一些信息来进行修改。 常常用在接收 "),s("code",[t._v("interface{}")]),t._v(" 类型参数的方法中，因为参数是接口类型，所以我们可以通过 "),s("code",[t._v("reflect.ValueOf")]),t._v(" 来获取到参数的值信息。 比如类型、大小、结构体字段、方法等等。")]),t._v(" "),s("p",[t._v("同时，我们可以对这些获取到的反射值进行修改。这也是反射的一个重要用途。")]),t._v(" "),s("h3",{attrs:{id:"reflect-value-的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect-value-的方法"}},[t._v("#")]),t._v(" reflect.Value 的方法")]),t._v(" "),s("p",[s("code",[t._v("reflect.Value")]),t._v(" 这个 "),s("code",[t._v("Sreuct")]),t._v(" 同样有很多方法：具体可以分为以下几类：")]),t._v(" "),s("ol",[s("li",[t._v("设置值的方法："),s("code",[t._v("Set*")]),t._v("："),s("code",[t._v("Set")]),t._v("、"),s("code",[t._v("SetBool")]),t._v("、"),s("code",[t._v("SetBytes")]),t._v("、"),s("code",[t._v("SetCap")]),t._v("、"),s("code",[t._v("SetComplex")]),t._v("、"),s("code",[t._v("SetFloat")]),t._v("、"),s("code",[t._v("SetInt")]),t._v("、"),s("code",[t._v("SetLen")]),t._v("、"),s("code",[t._v("SetMapIndex")]),t._v("、"),s("code",[t._v("SetPointer")]),t._v("、"),s("code",[t._v("SetString")]),t._v("、"),s("code",[t._v("SetUint")]),t._v("。通过这类方法，我们可以修改反射值的内容，前提是这个反射值得是合适的类型。"),s("strong",[t._v("CanSet 返回 true 才能调用这类方法")])]),t._v(" "),s("li",[t._v("获取值的方法："),s("code",[t._v("Interface")]),t._v("、"),s("code",[t._v("InterfaceData")]),t._v("、"),s("code",[t._v("Bool")]),t._v("、"),s("code",[t._v("Bytes")]),t._v("、"),s("code",[t._v("Complex")]),t._v("、"),s("code",[t._v("Float")]),t._v("、"),s("code",[t._v("Int")]),t._v("、"),s("code",[t._v("String")]),t._v("、"),s("code",[t._v("Uint")]),t._v("。通过这类方法，我们可以获取反射值的内容。前提是这个反射值是合适的类型，比如我们不能通过 "),s("code",[t._v("complex")]),t._v(" 反射值来调用 "),s("code",[t._v("Int")]),t._v(" 方法（我们可以通过 "),s("code",[t._v("Kind")]),t._v(" 来判断类型）。")]),t._v(" "),s("li",[t._v("map 类型的方法："),s("code",[t._v("MapIndex")]),t._v("、"),s("code",[t._v("MapKeys")]),t._v("、"),s("code",[t._v("MapRange")]),t._v("、"),s("code",[t._v("MapSet")]),t._v("。")]),t._v(" "),s("li",[t._v("chan 类型的方法："),s("code",[t._v("Close")]),t._v("、"),s("code",[t._v("Recv")]),t._v("、"),s("code",[t._v("Send")]),t._v("、"),s("code",[t._v("TryRecv")]),t._v("、"),s("code",[t._v("TrySend")]),t._v("。")]),t._v(" "),s("li",[t._v("slice 类型的方法："),s("code",[t._v("Len")]),t._v("、"),s("code",[t._v("Cap")]),t._v("、"),s("code",[t._v("Index")]),t._v("、"),s("code",[t._v("Slice")]),t._v("、"),s("code",[t._v("Slice3")]),t._v("。")]),t._v(" "),s("li",[t._v("struct 类型的方法："),s("code",[t._v("NumField")]),t._v("、"),s("code",[t._v("NumMethod")]),t._v("、"),s("code",[t._v("Field")]),t._v("、"),s("code",[t._v("FieldByIndex")]),t._v("、"),s("code",[t._v("FieldByName")]),t._v("、"),s("code",[t._v("FieldByNameFunc")]),t._v("。")]),t._v(" "),s("li",[t._v("判断是否可以设置为某一类型："),s("code",[t._v("CanConvert")]),t._v("、"),s("code",[t._v("CanComplex")]),t._v("、"),s("code",[t._v("CanFloat")]),t._v("、"),s("code",[t._v("CanInt")]),t._v("、"),s("code",[t._v("CanInterface")]),t._v("、"),s("code",[t._v("CanUint")]),t._v("。")]),t._v(" "),s("li",[t._v("方法类型的方法："),s("code",[t._v("Method")]),t._v("、"),s("code",[t._v("MethodByName")]),t._v("、"),s("code",[t._v("Call")]),t._v("、"),s("code",[t._v("CallSlice")]),t._v("。")]),t._v(" "),s("li",[t._v("判断值是否有效："),s("code",[t._v("IsValid")]),t._v("。")]),t._v(" "),s("li",[t._v("判断值是否是 "),s("code",[t._v("nil")]),t._v("："),s("code",[t._v("IsNil")]),t._v("。")]),t._v(" "),s("li",[t._v("判断值是否是零值："),s("code",[t._v("IsZero")]),t._v("。")]),t._v(" "),s("li",[t._v("判断值能否容纳下某一类型的值："),s("code",[t._v("Overflow")]),t._v("、"),s("code",[t._v("OverflowComplex")]),t._v("、"),s("code",[t._v("OverflowFloat")]),t._v("、"),s("code",[t._v("OverflowInt")]),t._v("、"),s("code",[t._v("OverflowUint")]),t._v("。")]),t._v(" "),s("li",[t._v("反射值指针相关的方法："),s("code",[t._v("Addr")]),t._v("（"),s("code",[t._v("CanAddr")]),t._v(" 为 "),s("code",[t._v("true")]),t._v(" 才能调用）、"),s("code",[t._v("UnsafeAddr")]),t._v("、"),s("code",[t._v("Pointer")]),t._v("、"),s("code",[t._v("UnsafePointer")]),t._v("。")]),t._v(" "),s("li",[t._v("获取类型信息："),s("code",[t._v("Type")]),t._v("、"),s("code",[t._v("Kind")]),t._v("。")]),t._v(" "),s("li",[t._v("获取指向元素的值："),s("code",[t._v("Elem")]),t._v("。")]),t._v(" "),s("li",[t._v("类型转换："),s("code",[t._v("Convert")]),t._v("。")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("Len")]),t._v(" 也适用于 "),s("code",[t._v("slice")]),t._v("、"),s("code",[t._v("array")]),t._v("、"),s("code",[t._v("chan")]),t._v("、"),s("code",[t._v("map")]),t._v("、"),s("code",[t._v("string")]),t._v(" 类型的反射值。")])]),t._v(" "),s("h3",{attrs:{id:"创建-reflect-value-的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-reflect-value-的方式"}},[t._v("#")]),t._v(" 创建 reflect.Value 的方式")]),t._v(" "),s("p",[t._v("我们可以通过下面的方式来获取变量的值信息（创建 "),s("code",[t._v("reflect.Value")]),t._v(" 的方式）：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/go/reflect1/7.webp",alt:"reflect_7.png"}})]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("reflect")]),t._v(" 包提供了反射机制，可以在运行时获取变量的类型信息、值信息、方法信息等等。")])]),t._v(" "),s("li",[s("p",[t._v("go 中的 "),s("code",[t._v("interface{}")]),t._v(" 实际上包含了两个指针，一个指向类型信息，一个指向值信息。正因如此，我们可以在运行时通过 "),s("code",[t._v("interface{}")]),t._v(" 来获取变量的类型信息、值信息。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("reflect.Type")]),t._v(" 代表一个类型，"),s("code",[t._v("reflect.Value")]),t._v(" 代表一个值。通过 "),s("code",[t._v("reflect.Type")]),t._v(" 可以获取类型信息，通过 "),s("code",[t._v("reflect.Value")]),t._v(" 可以获取值信息。")])]),t._v(" "),s("li",[s("p",[t._v("反射三定律：")]),t._v(" "),s("ul",[s("li",[t._v("反射可以将 "),s("code",[t._v("interface")]),t._v(" 类型变量转换成反射对象。")]),t._v(" "),s("li",[t._v("反射可以将反射对象还原成 "),s("code",[t._v("interface")]),t._v(" 对象。")]),t._v(" "),s("li",[t._v("如果要修改反射对象，那么反射对象必须是可设置的（"),s("code",[t._v("CanSet")]),t._v("）。")])])]),t._v(" "),s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("reflect.Value\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("和")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("reflect.Type\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("里面都有")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Elem\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("方法，但是它们的作用不一样：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("reflect.Type")]),t._v(" 的 "),s("code",[t._v("Elem")]),t._v(" 方法返回的是元素类型，只适用于 array、chan、map、pointer 和 slice 类型的 "),s("code",[t._v("reflect.Type")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("reflect.Value")]),t._v(" 的 "),s("code",[t._v("Elem")]),t._v(" 方法返回的是值，只适用于接口或指针类型的 "),s("code",[t._v("reflect.Value")]),t._v("。")])])]),t._v(" "),s("li",[s("p",[t._v("通过 "),s("code",[t._v("reflect.Value")]),t._v(" 的 "),s("code",[t._v("Interface")]),t._v(" 方法可以获取到反射对象的原始变量，但是是 "),s("code",[t._v("interface{}")]),t._v(" 类型的。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Type")]),t._v(" 和 "),s("code",[t._v("Kind")]),t._v(" 都表示类型，但是 "),s("code",[t._v("Type")]),t._v(" 是类型的反射对象，"),s("code",[t._v("Kind")]),t._v(" 是 go 类型系统中最基本的一些类型，比如 "),s("code",[t._v("int")]),t._v("、"),s("code",[t._v("string")]),t._v("、"),s("code",[t._v("struct")]),t._v(" 等等。")])]),t._v(" "),s("li",[s("p",[t._v("如果我们想通过 "),s("code",[t._v("reflect.Value")]),t._v(" 来修改变量的值，那么 "),s("code",[t._v("reflect.Value")]),t._v(" 必须是可设置的（"),s("code",[t._v("CanSet")]),t._v("）。同时如果想要 "),s("code",[t._v("CanSet")]),t._v(" 为 true，那么我们的变量必须是可寻址的。")])]),t._v(" "),s("li",[s("p",[t._v("我们有很多方法可以创建 "),s("code",[t._v("reflect.Type")]),t._v(" 和 "),s("code",[t._v("reflect.Value")]),t._v("，我们需要根据具体的场景来选择合适的方法。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("reflect.Type")]),t._v(" 和 "),s("code",[t._v("reflect.Value")]),t._v(" 里面，都有一部分方法是通用的，也有一部分只适用于特定的类型。如果我们想要调用那些适用于特定类型的方法，那么我们必须先判断 "),s("code",[t._v("reflect.Type")]),t._v(" 或 "),s("code",[t._v("reflect.Value")]),t._v(" 的类型（这里说的是 "),s("code",[t._v("Kind")]),t._v("），然后再调用。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);